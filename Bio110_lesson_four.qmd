---
format: html
editor: visual
filters: 
  - webr
  - naquiz
title: "Lesson 4: Box Plots"
---

```{webr-r}
#| context: setup

url<- "https://lewis-and-clark-data-science.github.io/BIO-110-Web-Tutorials/physiology_data.csv"
download.file(url, "physiology_data.csv")
#Pulls data that has been loaded into the Bio 110 github repo. 
#Note, the title of this data is also included in the _quarto.yml doc under resources so that it's included in the website. unclear if this is also necessary in the header of THIS document


data<- read.csv("physiology_data.csv")

```

## Introduction

Welcome to lesson four, where you will learn the basics of graphing using boxplots. Boxplots are an excellent graphing option for many datasets, because they are valid regardless of whether or not the data are normally distributed. But they take a little getting used to, because they are not as commonly seen as bar graphs are.

We will work with the physiology dataset, called data, that you have already seen.

Type the word data to recall what it contains.

```{webr-r}
#Type your code here


```

## Plotting Data

R has a function called plot, which makes a simple graph showing the relationship between an independent and a dependent variable.

-   When the independent variable is continuous, the plot command creates a scatterplot.

-   When the independent variable is categorical, the plot command creates a boxplot.

When data are in the form of numbers, R can treat them either as continuous (numeric variables, in R language) or as categorical (factor variables, in R language).

In `data` the different measurements are categorized as having been made under either `exercise (1)` or `resting (2)` conditions.

Suppose you wanted to create a graph that compared the respiratory quotients (RQ) under these two conditions.

The basic plot function has this form: `plot(yourdata$xvariable, yourdata$yvariable)`. You would need to substitute the actual names for the dataset and variables used as place-holders here.

Use the plot function to graph the RQs of the two groups, exercise and resting.

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Remember that variable names are case-sensitive.
:::

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
plot(data$Condition, data$RQ)
```
:::

Notice that R has created a scatterplot, and that it is treating the Condition variable as continuous. Many of the dots representing the data values overlap with each other. For this reason, it is hard to see whether the central tendencies of the two conditions differ. A boxplot is a better choice for these data.

### Boxplot

If the Condition variable were a factor variable, R would make a boxplot instead. We can tell R to treat this variable as a factor by writing: `data$Condition<-as.factor(data$Condition)`.

Try it for yourself. Make Condition  a factor variable.

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Did you spell everything correctly? 
:::

Now run the plot command again. 

```{webr-r}
#Type your code here


```

::: {.callout-note collapse="true" icon="false"}
## Answer
```{r}
#| eval: false

plot(data$Condition,data$RQ)
```

:::

When R understands that the Condition variable is a factor or category, the 'plot' command creates a boxplot. The horizontal bars represent the medians of each group. The boxes represent the interquartile range, i.e. the middle 50% of all the data values.


::: question
**In which condition is the median respiratory quotient higher, exercise or resting?**

::: choices
::: choice
resting
:::

::: {.choice .correct-choice}
exercise
:::
:::
:::

::: {.callout-tip collapse="true" icon="false"}
## Hint
Remember that 1 represents the exercise condition and 2 represents the resting condition.
:::

### Modifying a plot 

This boxplot is not very easy to read because the labels are not very clear. We can change the plotting parameters to improve its appearance. There are many ways to modify the plot command to add additional features. We'll cover some of the most basic modifications in this tutorial.

#### Axis labels 

The axis labels should be self-explanatory. We can create axis labels by adding the `xlab='_____'` and `ylab='____'` arguments to the plot command. Because these labels are character strings (i.e. lists of letters), we need to enclose them in quotation marks.

You can add these terms to the plot command, within the parentheses. For example, you might write: `plot(data$x, data$y, xlab='my x-axis label', ylab='my y-axis label')`.

Try it yourself, with "Condition" as the x-axis label, and "RQ" as the y-axis label. Don't forget to put the text of these labels in quotation marks, and to use a comma to separate them.
  
```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Remember that text is case-sensitive.
:::
::: {.callout-note collapse="true" icon="false"}
## Answer
```{r}
#| eval: false
plot(data$Condition, data$RQ, xlab="Condition", ylab="RQ")
```
:::

But the labels are still not completely clear. It would be much clearer to replace the 1 and 2 with the labels 'exercise' and 'resting.' You can do this by adding the `names=c('category name1', 'category name2', etc.)` argument to the plot command.

Try it now, using "exercise" for the first category name, and "resting" for the second one. Put the names command in front of the arguments for the axis labels, and separate them with a comma.

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

In this tutorial, R is looking for you to enter the arguments in a particular order. Try putting the names argument in front of the axis label argument -- this might be why you got an error message despite seeing the correct graph.
:::
::: {.callout-note collapse="true" icon="false"}
## Answer
```{r}
#| eval: false
plot(data$Condition, data$RQ, names=c("exercise","resting"), xlab="Condition",ylab="RQ")

```
:::

#### Adjusting the range of values 

You might also want to use a wider range of values on the y-axis so that the figure has a little more elbow room. For example, the current y-axis starts at an RQ value of 0.85 and ends at a value of 1.0. Maybe you'd like it to range from 0.75 to 1.05 instead.

You can do this by inserting the `ylim=c(lowerlimit, upperlimit)` argument into the plot command like this: `plot(data$x, data$y, ylim=c(0.75, 1.05))`.

Try it now, inserting the ylim specification after the commands for category names, axis labels, etc.
 
```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Remember to put all text expressions in quotes. And R wants you to use the same case, upper or lower, as the instructions specify.

:::
::: {.callout-note collapse="true" icon="false"}
## Answer
```{r}
#| eval: false
plot(data$Condition, data$RQ, names=c("exercise","resting"), xlab="Condition", ylab="RQ", ylim=c(0.75,1.05))

```
:::

## Congratulations! 

Hooray! You have completed lesson four. You have learned how to make and interpret a boxplot and how to modify the axis labels and the x- and y-limits. Lesson five  will teach you how to make a scatterplot.




