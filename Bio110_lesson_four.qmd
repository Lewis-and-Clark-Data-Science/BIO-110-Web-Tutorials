---
format: html
editor: visual
filters: 
  - webr
  - naquiz
title: "Lesson 4: Introduction to Plots"
---

```{webr-r}
#| context: setup
library(tidyverse)

url<- "https://lewis-and-clark-data-science.github.io/BIO-110-Web-Tutorials/physiology_data.csv"
download.file(url, "physiology_data.csv")
#Pulls data that has been loaded into the Bio 110 github repo. 
# Note: must include physiology_data.csv under resources in the quarto.yml file. Then render and commit to github. then can use the main website url and add "physiology_data.csv" at the end after the slash 


data<- read.csv("physiology_data.csv")

```

## Introduction

Welcome to lesson four, where you will learn the basics of graphing using a package called `ggplot2`. GGPlot is an excellent resource for creating many types of graphs, including histograms, box plots, scatterplots and more. We'll start by introducing how ggplot works and then try creating some box plots and histograms. 

### Dataset

We will work with the physiology dataset, called `data`, that you have already seen.

Type the word data to recall what it contains.

```{webr-r}
#Type your code here


```

## GGPlot 

There are 3 main components of ggplot: 

-   Data (`data`): This is your dataset

-   Aesthetics (`mapping=aes()`): This allows you to define your variables and define how you want your graph to look (color, size, shape, etc)

-   Geometric Objects (`geom_ ______`): Define the type of plot (bar plot, scatter plot, histogram, etc)

The basic structure of `ggplot()` is as follows. You'll notice that each of the three components above are included in this structure. Also notice that different lines (or properties) are connected using a `+`. 

```{r}
#| eval: false
ggplot(data, mapping=aes()) +
  geom_object()
```

### Example: Histogram

Let's look at an example to see how this works. We'll start by creating a histogram. A **histogram** shows the distribution of data values. 

Try running the code below. 

```{webr-r}
#| read-only: true
ggplot(data, mapping=aes(x=heart_rate))+
  geom_histogram(bins=5)
```

This will create a histogram of the heart rate values. On the x-axis are intervals (bins) representing the different possible data values. On the y-axis are the frequencies with which different data values are present in the data set (once, twice, etc.).

Notice how the code is set up: 
```{r}
#| eval: false
ggplot(data, mapping=aes(x=heart_rate)) +
  geom_histogram(bins=5)
```
  - Specify the `data` right after the first parenthesis
  
  - Specify the x variable (independent variable) and y variable (dependent variable) in the `aes()` argument. A histogram only requires an independent variable, so we did not specify the y variable. 
  
  - Specify histogram as your chosen `geom`. You can also decide how many bins you'd like with the `bins=5` argument. Try changing the 5 to a different number and running the code again, see what happens!
  
  - Chain together the function `ggplot()` with the geom `geom_histogram()` using a `+`. 

### Customizing a plot 

-   You can change how a plot looks by adding the "color" and "fill" attributes to your `geom_object()`. `color` indicates the outline color and `fill` specifies the background color. 

    ```{webr-r}
    ggplot(data, mapping=aes(x=heart_rate))+
      geom_histogram(bins=5, color="blue", fill="lightyellow")
    ```

-   You can adjust the labels of the plot by chaining on the `labs()` function: `labs(x="x label", y="y label", title="title")`

    ```{webr-r}
    ggplot(data, mapping=aes(x=heart_rate))+
      geom_histogram(bins=5, color="blue", fill="lightgray")+
      labs(x="Heart rate", y="Count", title="Histogram of Heart Rate for Physiology Data")
    ```

### Other ggplot resources

There are LOTS of resources online where you can learn about making plots with ggplot. Here are a few to start with: 

-   [ggplot cheatsheet PDF](https://rstudio.github.io/cheatsheets/data-visualization.pdf)

-   [posit.cloud ggplot cheatsheet website version](https://rstudio.github.io/cheatsheets/html/data-visualization.html)

-   [Bio110 tutorial cheatsheet - ggplot section](Bio110_cheatsheet.qmd#sec-ggplot)

### Try it out

Your turn to give it a try! Make a histogram of the `RQ` values for our `data`. As an extra challenge, add color and labels to your graph. 

::: panel-tabset

## Code editor

```{webr-r}
# Your code here


```

## Hint
Here's the basic structure. Click the next hint for more detailed structure. 
```{r}
#| eval: false
ggplot(data, mapping=aes(___________))+
      geom_histogram(______________)+
      labs(_____________)
```

## Hint

```{r}
#| eval: false
ggplot(data, mapping=aes(x=______))+
      geom_histogram(bins=_____, color="_____", fill="_______")+
      labs(x="______", y="_______", title="_______")
```

## Answer
```{r}
#| eval: false
ggplot(data, mapping=aes(x=RQ))+
      geom_histogram(bins=5, color="pink", fill="darkorange")+
      labs(x="Respiratory Quotient", y="Count", title="Histogram of Respiratory Quotient for Physiology Data")
```

:::

Great work! 





Boxplots are an excellent graphing option for many datasets, because they are valid regardless of whether or not the data are normally distributed. But they take a little getting used to, because they are not as commonly seen as bar graphs are.


Notice that R has created a scatterplot, and that it is treating the Condition variable as continuous. Many of the dots representing the data values overlap with each other. For this reason, it is hard to see whether the central tendencies of the two conditions differ. A boxplot is a better choice for these data.

### Boxplot

If the Condition variable were a factor variable, R would make a boxplot instead. We can tell R to treat this variable as a factor by writing: `data$Condition<-as.factor(data$Condition)`.

Try it for yourself. Make Condition a factor variable.

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Did you spell everything correctly?
:::

Now run the plot command again.

```{webr-r}
#Type your code here


```

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false

plot(data$Condition,data$RQ)
```
:::

When R understands that the Condition variable is a factor or category, the 'plot' command creates a boxplot. The horizontal bars represent the medians of each group. The boxes represent the interquartile range, i.e. the middle 50% of all the data values.

::: question
**In which condition is the median respiratory quotient higher, exercise or resting?**

::: choices
::: choice
resting
:::

::: {.choice .correct-choice}
exercise
:::
:::
:::

::: {.callout-tip collapse="true" icon="false"}
## Hint

Remember that 1 represents the exercise condition and 2 represents the resting condition.
:::

### Modifying a plot

This boxplot is not very easy to read because the labels are not very clear. We can change the plotting parameters to improve its appearance. There are many ways to modify the plot command to add additional features. We'll cover some of the most basic modifications in this tutorial.

#### Axis labels

The axis labels should be self-explanatory. We can create axis labels by adding the `xlab='_____'` and `ylab='____'` arguments to the plot command. Because these labels are character strings (i.e. lists of letters), we need to enclose them in quotation marks.

You can add these terms to the plot command, within the parentheses. For example, you might write: `plot(data$x, data$y, xlab='my x-axis label', ylab='my y-axis label')`.

Try it yourself, with "Condition" as the x-axis label, and "RQ" as the y-axis label. Don't forget to put the text of these labels in quotation marks, and to use a comma to separate them.

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Remember that text is case-sensitive.
:::

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
plot(data$Condition, data$RQ, xlab="Condition", ylab="RQ")
```
:::

But the labels are still not completely clear. It would be much clearer to replace the 1 and 2 with the labels 'exercise' and 'resting.' You can do this by adding the `names=c('category name1', 'category name2', etc.)` argument to the plot command.

Try it now, using "exercise" for the first category name, and "resting" for the second one. Put the names command in front of the arguments for the axis labels, and separate them with a comma.

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

In this tutorial, R is looking for you to enter the arguments in a particular order. Try putting the names argument in front of the axis label argument -- this might be why you got an error message despite seeing the correct graph.
:::

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
plot(data$Condition, data$RQ, names=c("exercise","resting"), xlab="Condition",ylab="RQ")

```
:::

#### Adjusting the range of values

You might also want to use a wider range of values on the y-axis so that the figure has a little more elbow room. For example, the current y-axis starts at an RQ value of 0.85 and ends at a value of 1.0. Maybe you'd like it to range from 0.75 to 1.05 instead.

You can do this by inserting the `ylim=c(lowerlimit, upperlimit)` argument into the plot command like this: `plot(data$x, data$y, ylim=c(0.75, 1.05))`.

Try it now, inserting the ylim specification after the commands for category names, axis labels, etc.

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Remember to put all text expressions in quotes. And R wants you to use the same case, upper or lower, as the instructions specify.
:::

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
plot(data$Condition, data$RQ, names=c("exercise","resting"), xlab="Condition", ylab="RQ", ylim=c(0.75,1.05))

```
:::

## Congratulations!

Hooray! You have completed lesson four. You have learned how to make and interpret a boxplot and how to modify the axis labels and the x- and y-limits. Lesson five will teach you how to make a scatterplot.
