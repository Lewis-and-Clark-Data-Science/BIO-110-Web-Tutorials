[
  {
    "objectID": "Bio110_lesson_five.html#introduction",
    "href": "Bio110_lesson_five.html#introduction",
    "title": "Lesson 5: Boxplots and scatterplots",
    "section": "Introduction",
    "text": "Introduction\nWelcome to lesson five, where you will learn the basics of graphing using boxplots and scatterplots.\nSee the home page for more details on how to use this tutorial and for troubleshooting tips!\nIn the previous lesson, we introduced GGPlot and made a histogram. In this lesson, we’ll continue to use GGPlot, but learn new ways to customize plots.\nWe will work with the physiology dataset, called data, that you have already seen. Type the word data to recall what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Bio110_lesson_five.html#boxplots",
    "href": "Bio110_lesson_five.html#boxplots",
    "title": "Lesson 5: Boxplots and scatterplots",
    "section": "Boxplots",
    "text": "Boxplots\nBoxplots are an excellent graphing option for many datasets, because they are valid regardless of whether or not the data are normally distributed. To create a boxplot, you need one variable that is categorical and one that is continuous.\nThe command geom_boxplot() will create a boxplot. We will add this as a geom_object() to our ggplot() function using a +. The structure of the code looks like this:\n\nggplot(data, mapping = aes()) +\n  geom_boxplot()\n\n\nSpecifying the type of variable\nBefore we create a boxplot, we need to tell R what kind of variables we are inputting.\nWhen creating a boxplot, our x variable should be categorical (called a factor variable in R language). A categorical variable has defined categories or groups.\nOur y variable should be continuous. A continuous variable can take any numerical value.\n\nQuestionAnswer and reasoning\n\n\n\nWhich variable in our dataset is a categorical variable?\n\n\n\n\n ✗RQ\n\n\n ✗heart_rate\n\n\n ✓Condition\n\n\n\n\n\n\n\nIn data the different measurements are categorized as having been made under either exercise (1) or resting (2) conditions. So Condition is a categorical variable because it has two different categories (or groups) that the measurements are placed into\n\n\n\nBefore we can create a boxplot, we have to tell R that whether our variable is a categorical variable. In R language, a categorical variable is called a “factor” variable. You can use this command to convert a variable to a categorical (or factor) variable: data$variableName &lt;- as.factor(data$variableName).\nTry that now with the categorical variable in data.\n\nCode editorCheck your workHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nRun the following code to check your work. If the output is “Factor w/ 2 levels….”, then you wrote the right code! If not, try again.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThe Condition variable should be categorical. So convert it to a factor variable (in R language).\n\n\n\ndata$Condition &lt;- as.factor(data$Condition)\n\n\n\n\nFinally, we can create a boxplot! Specify the x variable as Condition and use heart_rate for the y variable.\nHere’s the basic structure for your code again:\n\nggplot(data, mapping = aes()) +\n  geom_boxplot()\n\nAdd the x and y variables to create a boxplot. As an extra bonus, add labels and color!\n\nCode editorHintHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nggplot(data, mapping = aes(x= _______, y= ________)) +\n  geom_boxplot()\n\n\n\nMake sure you use the proper capitalization and spelling for the x variable, exactly as it is shown in our data.\n\n\nIf you get a weird looking boxplot, return to the previous code chunk and make sure you converted Condition to a factor variable.\n\n\n\ndata$Condition &lt;- as.factor(data$Condition)\n\nggplot(data, mapping = aes(x= Condition, y= heart_rate)) +\n  geom_boxplot()\n\n\n\n\nIf your code worked, you should see a boxplot for each condition, 1 (exercise) and 2 (resting). The boxplot displays the median, quartiles and outliers for each condition.\nHere’s an image that illustrates how to interpret a boxplot: \n\n\nLooking at the boxplot you created, what is the 1st quartile for condition 2 (resting)?\n\n\n\n\n ✗65\n\n\n ✓53\n\n\n ✗73\n\n\n\n\n\n\n\n\nModifying a Boxplot\n\nAdding labels\nNow, try adding labels to your boxplot. We’ll use the same function we used in lesson 4: labs(x=\"_____\", y=\"______\", title=\"_________\"). Try it now!\n\nCode editorHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nDon’t forget to use a + to chain on the labs() function after geom_boxplot().\n\n\n\nggplot(______, mapping = aes(x= _______, y= ________)) +\n  geom_boxplot()+\n  labs(x=\"____\", y=\"_____\", title=\"_______\")\n\n\n\n\nggplot(data, mapping = aes(x= Condition, y= heart_rate)) +\n  geom_boxplot()+\n  labs(x=\"Condition\", y=\"Heart Rate\", title=\"Boxplot of heart rate during exercise and rest\")\n\n\n\n\nBut these labels do not specify whether “1” and “2” refer to resting or exercise conditions. We can add the following function to change the labels on the x axis: scale_x_discrete(labels=c(\"firstLabel\", \"secondLabel\"))\nGive it a try!\n\nCode editorHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nggplot(data, mapping = aes(x= Condition, y= heart_rate)) +\n  geom_boxplot() +\n  labs(x=\"Condition\", y=\"Heart Rate\", title=\"Boxplot of heart rate during exercise and rest\") +\n  scale_x_discrete(labels=c(\"_______\", \"_______\"))\n\n\n\n\nggplot(data, mapping = aes(x= Condition, y= heart_rate)) +\n  geom_boxplot()+\n  labs(x=\"Condition\", y=\"Heart Rate\", title=\"Boxplot of heart rate during exercise and rest\")+\n  scale_x_discrete(labels=c(\"Exercise\", \"Resting\"))"
  },
  {
    "objectID": "Bio110_lesson_five.html#scatterplots",
    "href": "Bio110_lesson_five.html#scatterplots",
    "title": "Lesson 5: Boxplots and scatterplots",
    "section": "Scatterplots",
    "text": "Scatterplots\nSuppose we wanted to look at a scatterplot of the relationship between heart rate and respiratory quotient (RQ).\nWe can create a scatter plot by adding the geom geom_point() to the main ggplot() function. This will create a point for every data value.\nFollow the same overall structure that you used to create a boxplot and histogram. Try to create a scatterplot displaying the relationship between heart_rate (on the x-axis) and RQ (on the y-axis).\n\nCode editorHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nRecall the overall structure should be:\n\nggplot(data, mapping = aes(____________))+\n  geom_ _________ ()\n\n\n\n\nggplot(data, mapping = aes(x= _______, y= ________)) +\n  geom_point()\n\n\n\n\nggplot(data, mapping = aes(x= heart_rate, y= RQ)) +\n  geom_point()\n\n\n\n\n\nAdjust plot style\nJust like a boxplot, we can adjust the color, labels, and even the point size and shape.\n\nPoint size, color, shape\nYou can adjust the size, color and shape of the point by adding arguments to the geom_point() function.\nFor example: geom_point(color=\"red\", shape=\"circle\", size=1.5)\nGive it a try! Create a scatter plot displaying the relationship between heart_rate (on the x-axis) and RQ (on the y-axis) and change the color, size and shape of the points.\nTry different shapes and colors - just type in their name and see if they work! R might not understand all the colors or shapes, but you can experiment and see which ones work or look it up online or check out this linked pdf to see the colors that can be specified by name.\n\nCode editorHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUse the same code that you used in the code chunk just before this (you can just copy and paste!). Then add color, shape, and size specifications inside the parentheses of geom_point().\nDon’t forget to use quotation marks around your color and shape! Do NOT use quotation marks around the size.\n\n\n\nggplot(data, mapping=aes(x=heart_rate, y=RQ)) +\n  geom_point(color=\"______\", shape=\"_______\", size=________)\n\n\n\n\nggplot(data, mapping=aes(x=heart_rate, y=RQ)) +\n  geom_point(color=\"blue\", shape=\"triangle\", size=2)\n\n\n\n\n\n\nAxis limits\nYou can also adjust the axis limits by chaining on the functions: xlim(minLimit, maxLimit) and ylim(minLimit, maxLimit).\nFor example:\n\nggplot(data, mapping=aes(x=_____, y=_____)) +\n  geom_point() + \n  xlim(____, ____) +\n  ylim(____, _____)\n\nLet’s put everything together now! Create a scatterplot displaying the relationship between heart_rate (on the x axis) and RQ (on the y axis). Choose a color, size and shape for the points. Add reasonable x and y limits. And finally, add x and y axes labels and a title to your plot.\n(Feel free to copy and paste your code from previous code chunks)\n\nCode editorHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCheck that you have quotation marks and parentheses in the right spots.\nDid you chain all the different functions together with a +?\nDid you spell all your variable names correctly?\n\n\n\nggplot(_____, mapping=aes(x=______, y=______)) +\n  geom_point(color=\"______\", shape=\"_______\", size=________) +\n  xlim(____, ____) +\n  ylim(____, ____) +\n  labs(x=\"_____\", y=\"_____\", title=\"_____\")\n\n\n\n\nggplot(data, mapping=aes(x=heart_rate, y=RQ)) +\n  geom_point(color=\"blue\", shape=\"triangle\", size=2) +\n  xlim(40, 90) +\n  ylim(0.7, 1.1) +\n  labs(x=\"Heart Rate\", y=\"Respiratory Quotient\", title=\"Relationship between Heart Rate and Respiratory Quotient\")\n\n\n\n\nNow you’ve learned the basics of creating a scatterplot when both the x and y variables are continuous. You know how to alter many aspects of your figure’s appearance to make it clearer.\n\n\n\nScatterplots with a categorical variable\nNext, we’ll look at making scatterplots when the independent (x) variable is categorical.\nSuppose you wanted to create a graph that compared the respiratory quotients (RQ) under the two conditions: exercise and resting. Remember that the Condition variable is categorical because it sorts the data values into two categories.\n\nSpecifying Type of Variable\nFirst, let’s tell R that Condition is a factor (categorical) variable. We already did this when we made a boxplot, so skip this step if you already did it and haven’t refreshed the page since.\nDo you remember how to change a variable to a factor variable?\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nScatterplot\nNow, create a scatterplot the RQs of the two Condition groups, exercise and resting.\n\nCode editorHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYour x variable is Condition and your y variable is heart_rate\n\n\n\nggplot(data, mapping=aes(x=Condition, y=RQ))+\n  geom_point()\n\n\n\n\nWhen you have one categorical variable and one continous variable, a scatterplot is only a good option if there are only a few data values, as in this example. Otherwise, use a boxplot.\n\n\nAxis labels on categorical scatterplot\nLet’s add labels to our plot. You know how to add axes labels and a title, but how can we change the unhelpful labels “1” and “2”? We will use the same command we used when making a boxplot. Refer back to your code when you made a boxplot, and see if you can add labels to your scatterplot. Add some color too!\n\nCode editorHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThe command you need to add is scale_x_discrete(labels(c(\"________\", \"_________\"))).\n\n\n\nggplot(____, mapping=aes(x=______, y=______))+\n  geom_point(color=\"red\")+\n  labs(x=\"_______\", y=\"_______\", title=\"_______\")\n  scale_x_discrete(labels(c(\"________\", \"_________\")))\n\n\n\n\nggplot(data, mapping=aes(x=Condition, y=RQ))+\n  geom_point(color=\"red\")+\n  labs(x=\"Condition\", y=\"Respiratory Quotient\", title=\"Respiratory Quotient at Rest or while Exercising\")+\n   scale_x_discrete(labels=c(\"Exercise\", \"Resting\"))"
  },
  {
    "objectID": "Bio110_lesson_five.html#congratulations",
    "href": "Bio110_lesson_five.html#congratulations",
    "title": "Lesson 5: Boxplots and scatterplots",
    "section": "Congratulations",
    "text": "Congratulations\nThat’s it! Now you’re an expert in making boxplots and scatterplots. In lesson six, you’ll learn how to make two kinds of bar graphs."
  },
  {
    "objectID": "Bio110_lesson_seven.html#introduction",
    "href": "Bio110_lesson_seven.html#introduction",
    "title": "Lesson 7: Inferential stats",
    "section": "Introduction",
    "text": "Introduction\nIn this lesson you will learn how to perform some basic inferential statistics.\nWhen testing scientific hypotheses, we are trying to decide whether the pattern in our data supports the hypothesis or not.\nBut some apparent patterns can be due to chance alone. Statistical inference gives us a way to compute the likelihood that an apparent pattern in our data could be due merely to chance.\n\nStatistical Significance\nMost scientists only accept a pattern as supporting a hypothesis if it is very unlikely that the pattern could be due to chance. We define an event as ‘very unlikely’ if it has a probability of .05 (5%) or less.\nStatistical inference involves using the data to compute the probability – the p-value – that a pattern could have arisen by chance. If the p-value associated with a test is less than or equal to 0.05, we conclude that the pattern is statistically significant. In other words, the pattern is highly unlikely to have arisen by chance."
  },
  {
    "objectID": "Bio110_lesson_seven.html#dataset",
    "href": "Bio110_lesson_seven.html#dataset",
    "title": "Lesson 7: Inferential stats",
    "section": "Dataset",
    "text": "Dataset\nIn this tutorial you will work with a sample dataset called sampledata that has already been imported into the tutorial.\nWrite the command for looking at the structure of sampledata so you can see what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe structure function is str(datafilename).\n\n\n\nYou should also look at the values in the table. Write the command to display the data file.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nJust type the name of the file\n\n\n\nYou can see that sampledata contains 30 different observations (rows) and 5 variables (columns).\n\nWeight, length, and repro are numerical variables.\nTemp is a factor variable with two levels, A and B.\nDiet is an integer variable, but in this data set, we will want to use it as a factor variable: the experimental organisms were fed one of three possible types of diet.\n\nWrite a command that will convert diet to a factor variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nYou will need to use the as.factor() function.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nsampledata$diet&lt;-as.factor(sampledata$diet)"
  },
  {
    "objectID": "Bio110_lesson_seven.html#statistical-analysis-with-continuous-variables",
    "href": "Bio110_lesson_seven.html#statistical-analysis-with-continuous-variables",
    "title": "Lesson 7: Inferential stats",
    "section": "Statistical Analysis with Continuous Variables",
    "text": "Statistical Analysis with Continuous Variables\nLet’s start by thinking about situations where both the independent and dependent variables are continuous. You are interested in knowing if there is an association or a relationship between the values of the two variables. Does the value of one predict the value of the other?\nWe will work with the variables for weight and for length.\n\nWhat is the most appropriate kind of plot for looking at the possible relationship between two continuous variables?\n\n\n\n\n ✗histogram\n\n\n ✓scatterplot\n\n\n ✗barplot\n\n\n ✗boxplot\n\n\n\n\n\nWrite a command to plot the relationship between weight and length. Put length on the x-axis.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDid you remember to use the dollar sign to specify the data file, and that the x-variable goes first in the plot command?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(sampledata$length, sampledata$weight)\n\n\n\n\n\nRegression Analysis\nWe can carry out a regression analysis to find the equation for the best-fit line through the points. The command: model&lt;-lm(sampledata$weight~sampledata$length) performs a regression of weight (the y-variable) on length (the x-variable) and stores it in a variable called model. lm stands for ‘linear model.’\nIt is important to notice that in this command, the positions of the x- and y-variables are reversed from what they are in the plot command, and they are separated by a tilde (~) rather than a comma.\nWrite the command to perform a linear regression of weight on length for sampledata, and store it in a variable called weightreg.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry weightreg&lt;-lm(sampledata$weight~sampledata$length)\n\n\n\nTo see the line superimposed on your graph, you can give the command abline(model).\nWrite the command to add a regression line to your scatterplot. Don’t forget to substitute weightreg for model.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry abline(weightreg)\n\n\n\nYou can find the slope of the line and the y-intercept (the values m and b in the equation y = mx + b) by typing the name of the variable you created from your regression.\nWrite the code to find the slope and y-intercept of the best-fit line.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nYou named your regression variable weightreg\n\n\n\nThe output shows the values of the line’s y-intercept (-5.1502) and its slope (0.8149).\n\nIs it statistically significant?\nThe points fit the line quite well. It seems unlikely that this association could have happened just by accident, though it IS possible. We would like to know the probability that there is actually no relationship between these two variables, that the slope of the true line through them is actually zero (a flat line).\nWe can find the p-value by using the command summary(model).\nWrite the command to find the probability that the true slope of the line is zero. Don’t forget to use the name you gave your model variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe command is summary(weightreg)\n\n\n\nIn the ‘coefficients’ table, the line for sampledata$length shows a p-value, 4.7 x 10^-8, that is much smaller than 0.05. This means that you can conclude that the effect of length on weight in this sample is highly statistically significant."
  },
  {
    "objectID": "Bio110_lesson_seven.html#statistical-analysis-with-continuous-and-categorical-variables",
    "href": "Bio110_lesson_seven.html#statistical-analysis-with-continuous-and-categorical-variables",
    "title": "Lesson 7: Inferential stats",
    "section": "Statistical Analysis with Continuous and Categorical Variables",
    "text": "Statistical Analysis with Continuous and Categorical Variables\nNow consider a different data analysis situation. Suppose you did a study where you measured some continuous dependent variable under two different conditions, and you want to know if the two groups differ.\nAgain using sampledata, consider the categorical variable temp. Suppose we want to know whether weight differs depending on whether the temp category is A or B. In this situation, we would perform a t-test.\n\nVisualize data\nFirst it is a good idea to look at the data visually. We can most easily do this with a boxplot.\n\nTo create a boxplot that compares weights for the two different temp categories, what variable should go on the x-axis?\n\n\n\n\n ✗weight\n\n\n ✗length\n\n\n ✓temp\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the variable that defines the categories.\n\n\n\nIn lesson 3, you used the plot function to make both boxplots and scatterplots, depending on the nature of the independent variable (categorical or continuous). There is another boxplot command, creatively named boxplot.\nIn the boxplot command, any independent variable that is numeric is treated as a factor variable automatically. Its syntax is: boxplot(depvar ~ indepvar). Notice that, unlike the plot command, the dependent variable is listed first in the boxplot command, and the two variables are separated by a tilde (~). It is easy to get these two commands mixed up!\nUsing the boxplot function, write the command to make a boxplot of weights for the two temp categories\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nIn the parentheses, the dependent variable goes first, followed by the squiggle, and then the independent variable.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nboxplot(sampledata$weight~sampledata$temp)\n\n\n\n\nYou can see that the medians for the two sets of data values are different, but the values overlap quite a bit. Are they different enough that the difference is unlikely to be due to chance?\n\n\n2 Sample t-test\nWe can find out by performing a t-test. You used a t-test in lesson 3 to calculate the confidence interval for a single variable; this is called a one-sample t-test. This time you will do a two-sample t-test, which is a way of finding out whether two groups of data differ significantly.\nThere are two ways of writing the t-test command. If the data are in one variable, and the classification categories are in another, as they are in this case, we would write: t.test(data$depvar ~ data$catvar), using real file and variable names in place of these placeholders.\nWrite the command to perform a t-test to determine if weights for the different temperatures are significantly different.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry t.test(sampledata$weight~sampledata$temp)\n\n\n\nThe output shows a p-value (in this case, 0.2308) for the probability that a difference this large could be due to chance alone. Since p is greater than 0.05, we should conclude that the differences in weights are NOT statistically significant. The two groups might really have similar weights, but just by chance, we sampled heavier individuals in one group than in the other.\nSometimes the data for the two groups we would like to compare with a t-test are in two different variables of our data table.\nWhen that is the case, we use this command: t.test(varA, varB). If we wished, we could use the subset command to create two separate variables from sampledata$weight, but this would be an unnecessary extra step. If we did this, though, we would get the same result.\nIt is important to remember, though, that t-tests are designed for data values with a normal distribution. Sometimes data are very non-normal. For example, go back and look at the variable repro.\nYou can see that there are a very large number of zeroes. This is often a good indication that the mean is not the center of the data distribution.\n\n\nWilcoxon test\nThere is an alternative to the t-test that does not require the data to have a normal distribution. It is called a Wilcoxon test (also sometimes a Mann-Whitney Test).\n\nVisualize data\nBefore doing a statistical test, though, write some code to make a boxplot showing how the values of repro differ for the two temperatures.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nPut the y-variable first, followed by the squiggle, and then the x-variable.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nboxplot(sampledata$repro~sampledata$temp)\n\n\n\n\nOnce again, the medians differ, but the data values for the two groups overlap.\n\n\nWilcoxon test\nTo carry out a Wilcoxon test, use the command: wilcox.test(data$depvar~data$catvar).\nWrite the command to perform a Wilcoxon test to determine whether values of repro differ for the two temp conditions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry wilcox.test(sampledata$repro~sampledata$temp)\n\n\n\nIt’s fine to ignore the warning values that you see whenever the data contain duplicate values.\nYou can see that the p-value (.076) tells you that the differences are NOT statistically significant, though they are nearly so.\n\n\n\nANOVA Test\nAnother data analysis situation you might encounter is the need to compare more than two groups with each other. This is done with a test called an analysis of variance (ANOVA).\nSuppose we wanted to know whether diet had an effect on the length of the organisms in our sample. Notice that there are 3 diet categories.\n\nVisualize data\nWrite a command to create a boxplot for length as a function of diet category.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nLength is the dependent variable, diet is the independent variable.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nboxplot(sampledata$length~sampledata$diet)\n\n\n\n\nWe can see that length is quite different between diets 1 and 2, but not nearly as different between diets 2 and 3. Are these differences statistically significant?\n\n\nANOVA test\nThe command to perform an ANOVA is: model&lt;-aov(depvar~indvar). This syntax (dependent variable, tilde, independent variable) should be feeling familiar by now.\nWrite a command to perform an ANOVA on length as a function of diet, and assign the result to a variable called dietaov.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry dietaov&lt;-aov(sampledata$length~sampledata$diet)\n\n\n\nTo see the output from the ANOVA, you can use the command summary(model), replacing the placeholder with your own model’s name.\nWrite a command to look at the output from your ANOVA.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry summary(dietaov)\n\n\n\nThe output is a table of numbers. The important line is the one labelled sampledata$diet. This reports the probability that the differences in length among the diets could be merely due to chance. The p-value is very small, .00011, so the effect of diet on length is highly statistically significant.\nHowever, recall that you are comparing 3 groups, and that the differences between diet groups 1 and 2 were larger than the differences between diet groups 2 and 3. Are ALL these differences statistically significant?\nNot necessarily. A significant p-value in an ANOVA only means that at least one of the groups is different from the rest, not that ALL the groups are different from one another.\n\n\n\nTukey’s test\nSo to probe the situation more deeply, we should follow up this significant ANOVA with a Tukey’s test. A Tukey’s test looks at all the pairwise comparisons of groups, and gives a separate p-value for each comparison.\nThe command to perform a Tukey’s test is TukeyHSD(model), HSD stands for ‘honestly significant difference.’\nWrite the command to perform a Tukey’s test on your model.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry TukeyHSD(dietaov)\n\n\n\nThe output is in the form of a table that compares each of the 3 groups to the others, with the p-value for that particular comparison as the final column.\nWe can see that diet group 1 differs significantly from group 2, and that group 1 differs from group 3, but that diet group 2 does NOT differ significantly from diet group 3.\n\n\nTwo-way ANOVA for multiple independent variables\nANOVA is a very versatile data analysis tool. For example, an ANOVA can be used to explore data from experiments that have more than one independent variable.\nIn our sampledata, there are two categorical variables, temp and diet. In the study that generated these data, individuals were reared under one of two different temperature regimes, and were raised on one of three different diets. We’d like to know how temp influenced body weight, how diet influenced body weight, and whether there was an interaction between the effects of temp and diet.\n\nVisualize data\nLet’s start, as always, by looking at a graph. In this case, we want to see a clustered boxplot that shows all 6 combinations of diet and temperature as separate bars.\nTo create a boxplot for a situation where there are two different independent variables, you can use this code: boxplot(depvar ~ indvar1*indvar2), replacing these placeholders with the appropriate file and variable names.\nWrite the code to create a boxplot of length, using temp for the first independent variable and diet for the second.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry boxplot(sampledata$length~sampledata$temp*sampledata$diet)\n\n\n\nNotice that on the x-axis, there are 3 diet groups (1,2,and 3); within each group, the data for the two temps (A and B) are shown side-by-side. If instead you wanted two temp groups, with the 3 diets shown side-by-side within them, you would reverse the order of the two independent variables in the boxplot command.\nTry it now. Write a boxplot command to create a length boxplot that has two temperature groups with the three diet types shown side-by-side.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nJust reverse the positions of temp and diet in the code you just wrote.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nboxplot(sampledata$length~sampledata$diet*sampledata$temp)\n\n\n\n\n\n\nTwo-way ANOVA\nWe can assess the effect of both temperature and diet on length with a two-way ANOVA. The two-way refers to having two different independent variables, temp and diet in this case.\nThe command for performing a two-way ANOVA is model&lt;-aov(data$depvar ~ data$cat1*data$cat2). cat1 and cat2 are placeholders that represent the 2 independent variables.\nWrite a command to perform a two-way ANOVA on the effect of temp and diet on length, and store the result in a variable named length2way. Put temp in front of the *, and diet behind.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry length2way&lt;-aov(sampledata$length~sampledata$temp*sampledata$diet)\n\n\n\nType a command to look at the output from your new two-way ANOVA.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry summary(length2way)\n\n\n\nThe table of output gives the probability that the differences in length between the two temperatures could be due to chance alone, and the probability that the differences in length among the three diets could be due to chance alone. The interaction term assesses whether the effect of temperature depends on which diet type the organism received.\nIn this example, temperature did NOT have a significant effect on length (p=.205761), diet DID have a significant effect on length (p=.000124), and there was no interaction between temperature and diet (p=.154474)).\nIn other words, the effect of temperature was the same for all diets, and the effect of diet was the same for both temperatures."
  },
  {
    "objectID": "Bio110_lesson_seven.html#congratulations",
    "href": "Bio110_lesson_seven.html#congratulations",
    "title": "Lesson 7: Inferential stats",
    "section": "Congratulations!",
    "text": "Congratulations!\nNow you are familiar with some of the most basic and widely-used tests of statistical inference. To learn more about statistical inference in general, consider taking Math 255. To learn more about carrying out statistical analyses in R, there are many online resources that can be easily found by Googling your specific situation."
  },
  {
    "objectID": "Bio110_cheatsheet.html",
    "href": "Bio110_cheatsheet.html",
    "title": "Bio110 Cheatsheet",
    "section": "",
    "text": "Basic arithmetic\n\nExamples: 5*6, sqrt(9), abs(-3)\nType help(command) to find information about any command\n\nCreate variables: Use &lt;- or = to assign values to a variable.\n\nExample: x &lt;- 7\n\nCreate a vector:\n\nvector &lt;- c(1,3,7)\nvector\n\n[1] 1 3 7\n\n\n\n\n\n\nmean(vector) : Calculates the mean of a given set of values.\nmedian(vector) : Calculates the median of a given set of values.\nvar(vector): Calculates the variance of a given set of values.\nsd(vector) : Calculates the standard deviation of a given set of values.\nstd.error(vector): Calculates the standard error of a given set of values.\nIMPORTANT: This command is stored in a package plotrix, so you must install and load plotrix to find standard error.\nt.test(data$variableName): Calculates a t-test for a given set of values. Also outputs the 95% confidence interval.\nnrow(data): Calculates the total number of rows in a dataset\nna.rm = TRUE : Remove NA values. Add this as an argument to any of the statistics calculations. E.g. mean(vector, na.rm=TRUE)"
  },
  {
    "objectID": "Bio110_cheatsheet.html#basic-r-commands",
    "href": "Bio110_cheatsheet.html#basic-r-commands",
    "title": "Bio110 Cheatsheet",
    "section": "",
    "text": "Basic arithmetic\n\nExamples: 5*6, sqrt(9), abs(-3)\nType help(command) to find information about any command\n\nCreate variables: Use &lt;- or = to assign values to a variable.\n\nExample: x &lt;- 7\n\nCreate a vector:\n\nvector &lt;- c(1,3,7)\nvector\n\n[1] 1 3 7\n\n\n\n\n\n\nmean(vector) : Calculates the mean of a given set of values.\nmedian(vector) : Calculates the median of a given set of values.\nvar(vector): Calculates the variance of a given set of values.\nsd(vector) : Calculates the standard deviation of a given set of values.\nstd.error(vector): Calculates the standard error of a given set of values.\nIMPORTANT: This command is stored in a package plotrix, so you must install and load plotrix to find standard error.\nt.test(data$variableName): Calculates a t-test for a given set of values. Also outputs the 95% confidence interval.\nnrow(data): Calculates the total number of rows in a dataset\nna.rm = TRUE : Remove NA values. Add this as an argument to any of the statistics calculations. E.g. mean(vector, na.rm=TRUE)"
  },
  {
    "objectID": "Bio110_cheatsheet.html#installing-packages",
    "href": "Bio110_cheatsheet.html#installing-packages",
    "title": "Bio110 Cheatsheet",
    "section": "Installing packages",
    "text": "Installing packages\n\ninstall.packages(\"package\"): Install a package. IMPORTANT: Only run this once in a single R session. Do not rerun unless you restart R.\nlibrary(package): Load a package that has already been installed."
  },
  {
    "objectID": "Bio110_cheatsheet.html#working-with-a-data-set-in-the-tidyverse",
    "href": "Bio110_cheatsheet.html#working-with-a-data-set-in-the-tidyverse",
    "title": "Bio110 Cheatsheet",
    "section": "Working with a data set in the tidyverse",
    "text": "Working with a data set in the tidyverse\nWe use the tidyverse package to analyze data in these tutorials. See directly above for how to install.\n\nUploading and viewing a data set\n\ndataFrame &lt;- read_csv(\"myCSV.csv\") : Creates a data frame from a file called myCSV.csv\ndata: View your data - type the name and run code\nstr(dataFrame): Gives the structure of data frame\ndataFrame$columnName: Calls up specific column from a data frame\nsummary(dataFrame): Returns min, max, mean, meadian, 1st/3rd quartiles for all vectors in dataFrame\n\n\n\nGrouping and Summarizing data\n\ngroup_by(.data, column): Takes a dataset and groups it by a column/variable\nsummarize(.data, summaryStat = statistic formula): Takes a dataset and outputs summary statistics that you define.\n\nn(): Calculates current group size. Can be used in summarize and group_by\nCombine group_by and summarize using the pipe (|&gt;) to see summary statistics for specific groups/variables.\n\nThe pipe: Use |&gt; OR %&gt;% to string functions and data together. Read as “AND THEN”.\nExample:\n\n  dataFrame |&gt; \n    group_by(firstColumn)|&gt; \n    summarize(mean_of_secondColumn = mean(secondColumn), \n              standard_deviation_of_secondColumn = sd(secondColumn))\n\n\n\n\nFiltering data\n\nfilter(data, columnName == \"some value\"): Extract data with a specific condition, from a given column.\n\nUse logical operators to combine conditions: & (and), | (or), ! (not)\nUse comparison operators to describe conditions: &lt;, &gt;, ==, !=, &lt;=, &gt;="
  },
  {
    "objectID": "Bio110_cheatsheet.html#sec-ggplot",
    "href": "Bio110_cheatsheet.html#sec-ggplot",
    "title": "Bio110 Cheatsheet",
    "section": "GGPlot",
    "text": "GGPlot\n\nResources:\n\nGGPlot Cheatsheet pdf\nPosit.cloud ggplot cheatsheet, website version\n\n\n\nGGPlot Basics:\n\nBasic structure:\n\nggplot(data, mapping=aes()) +\n      geom_function()\n\nConnect different properties using a +\nBasic Components:\n\nData: data=dataSet: Define your data set\nAesthetics: mapping = aes(variables): Define the variables. Can also specify color/fill for your graph and geometries.\nGeometry: geom_object(): Define the type of plot\n\n\n\n\nGeometries\n\ngeom_histogram(): Creates a histogram\n\nSyntax: geom_histogram(bins=X) Specify number of bins\n\ngeom_boxplot(): Creates a boxplot\n\nAdd error bars: stat_boxplot(geom=\"errorbar\")\n\ngeom_point(): Creates points (scatterplot) for each data point\n\nCan specify color = ___, shape = ____, size = ____\n\ngeom_col() : Creates a bar graph with pre-aggregated data that you input\n\nAdd error bars: geom_errorbar(mapping=aes(ymin, ymax), width)\n\ngeom_smooth(method=\"lm\", se=FALSE): Creates a line of best fit\n\n\n\nPlot Customization\nChain these onto your functions with a + to customize your plot:\n\nlabs(x=\"____\", y=\"____\", title=\"______\") : Add a title and axes labels to your graph\nscale_x_discrete(labels=c(\"firstLabel\", \"secondLabel\")): Add labels for individual categories on the x axis\nxlim(minLimit, maxLimit) and ylim(minLimit, maxLimit): Specify x and y minimum and maximum values\nfacet_wrap(~ variable): Create separate plots for each aspect of a given variable. Creates a clustered plot.\ncolor=\"____\" and fill=\"_____\": Change the outline color (color) and filled in color (fill) of your plot. Add these commands in the geom_object() parentheses.\nAnd lots more!"
  },
  {
    "objectID": "Bio110_lesson_two.html#introduction",
    "href": "Bio110_lesson_two.html#introduction",
    "title": "Lesson 2: Central Tendency",
    "section": "Introduction",
    "text": "Introduction\nWelcome. In this lesson, you will learn about central tendency. See the home page for more details on how to use this tutorial and for troubleshooting tips!"
  },
  {
    "objectID": "Bio110_lesson_two.html#analyzing-central-tendency",
    "href": "Bio110_lesson_two.html#analyzing-central-tendency",
    "title": "Lesson 2: Central Tendency",
    "section": "Analyzing Central Tendency",
    "text": "Analyzing Central Tendency\nWhen analyzing a set of data values, it is often important to summarize where the numerical ‘center’ of the data values lies.\nStart by creating a variable called mydata that contains the values 4, 4, 2, 6, 3, 0, and 3\n\nCode editorHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nDid you remember to use the assignment arrow (&lt;-) and the concatenate operator (c)?\n\n\n\nmydata &lt;- c(4, 4, 2, 6, 3, 0, 3)\n\n\n\n\n\nCalculating Mean and Median\n\nMean\nThe mean (also known as the average) is a commonly-used measure of the center of a set of values. To compute the mean, you can use the command mean(data), substituting the name of your variable for the placeholder shown here.\nFind the mean of your mydata variable.\n\nCode editorHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPut the name of your variable in the parentheses. You don’t need to use quotes.\n\n\n\nmean(mydata)\n\n\n\n\n\n\nArguments in a function\nWhen you use functions like mean() in R, the thing you put in the parentheses is called an argument. In this case, our argument for the mean function is mydata. Sometimes, functions will require multiple different arguments.\nFor some data sets, the mean is not a very good measure of the data’s central tendency. For example, what if your data values were 2, 2, 2, 3, 1, 3, 12?\nTo analyze this data, create a new variable, data_two, containing these values.\n\nCode editorHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nDon’t forget to use the assignment arrow and the concatenate function.\n\n\n\ndata_two&lt;-c(2, 2, 2, 3, 1, 3, 12)\n\n\n\n\nNext, compute the mean of data_two.\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nmean(data_two)\n\n\n\n\nNotice that all but one of the data values are lower than the mean, because there is one really high value. For data like these, the median is a better measure of central tendency.\n\n\nMedian\nThe median is the middle value when the data are ordered from lowest to highest.\nThe function median(dataName) computes the median for a variable.\nCompute the median of data_two.\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nmedian(data_two)\n\n\n\n\nNotice that the median is not unduly influenced by the single large data value, and so is a more accurate measure of the center of these data values.\nIf you are unsure whether to use mean or median to describe the center of data values, a histogram can be very helpful. In lesson 4, you will learn how to create a histogram but for now it is worth noting that a histogram can help you see how data is distributed. When a histogram’s peak is not near the center, and/or its two tails are quite asymetrical, it’s best to use the median, not the mean, to summarize the central tendency.\n\n\nBasic Arithmetic with mean/median\nNext, write an expression for the difference between the mean and the median of data_two. R uses the symbols + for addition, - for subtraction, * for multiplication, and / for division. Subtract the smaller value from the larger value.\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nmean(data_two)-median(data_two)\n\n\n\n\n\n\nFinding mean and median in a dataset\nIn lesson 1, we used a dataframe called data with the variables RQ, Condition, heart_rate, Individual.\nType data to recall what it contains.\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nNow, try to find the mean of the heart_rate column in data.\n\nCode editorHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUse the syntax yourDataName$columnName to refer to a specific column. You can type your column name directly in the parentheses in the mean() function.\n\n\n\nmean(data$heart_rate)\n\n\n\n\nYou should get an answer that says ‘NA’. This is because there are NA values in the heart rate column, which prevent R from calculating the mean. So, we have to add one more thing to our code which tells R to ignore the ‘NA’ values: na.rm=TRUE. We add this in the parentheses in the mean() and median() functions. Use a comma to seperate yourDataName and na.rm=TRUE.\nFor example:\n\nmean(data$heart_rate, na.rm=TRUE)\nmedian(data$heart_rate, na.rm=TRUE)\n\nTry finding the mean of the heart rate column again, but add na.rm=TRUE this time.\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nmean(data$heart_rate, na.rm=TRUE)"
  },
  {
    "objectID": "Bio110_lesson_two.html#summarizing-central-tendency",
    "href": "Bio110_lesson_two.html#summarizing-central-tendency",
    "title": "Lesson 2: Central Tendency",
    "section": "Summarizing central tendency",
    "text": "Summarizing central tendency\nIn this section, we’ll learn how you can easily display the mean and median of multiple different groups in a data set.\nThe functions group_by() and summarize() help us do this.\nFirst, though, we’ll learn about a function called the pipe.\n\nThe Pipe\nA very useful function in the tidyverse (our current set of R packages) is called the pipe. It’s a way to string together functions and data. You can read it as “AND THEN”.\nThe pipe can be written as %&gt;% or |&gt;\nBoth do the same thing! Let’s look at an example. Click “run code” below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLet’s break down what is happening:\n\nFirst, we call up the data we want with data$RQ.\nThen we use the pipe (|&gt;) to say “AND THEN”.\nFinally, we calculate the mean, but we don’t need to input our data because we already did in the first line and used the pipe to string them together.\n\nThe pipe will be very helpful to string together functions!\n\n\nSummarizing data with group_by() and summarize()\nWe use the functions group_by() and summarize() to generate summary statistics (mean, median, etc) for specific groups in our data set.\n\ngroup_by(): a function that takes a data set and groups it by a variable/column\nsummarize(): uses the grouped data set from group_by, and lets you define summary statistics columns for that group.\n\nThe syntax is: summarize(yourStatName = formula(columnName, na.RM=TRUE))\n\n\nLet’s see how these work with an example:\nRecall, the Condition variable specifies whether the measurements were made under exercise (1) or resting (2) conditions. Suppose we want to compute the mean and median heart rate for the individuals in our sample, but we want separate values for the exercise and resting conditions.\nWe can use group_by() and summarize() to do this.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou should see a table that displays the average and median heart rate for each condition (1 and 2).\nLet’s break down how this works:\n\nFirst, we specify our data and pipe to the next function.\nThen we group by our conditions, listed in the column Condition.\nNext, use summarize() and specify that we want to find the mean and median. summarize() creates new columns for each statistic we define. We also rename the columns averageHearRate and medianHeartRate.\n\nDefine mean: averageHeartRate = mean(heart_rate, na.rm=TRUE)\nDefine median: medianHeartRate = median(heart_rate, na.rm=TRUE)\n\n\nWe use the pipe |&gt; to string all these functions together.\nNow you try! Find the mean and median for the RQ (respiratory quotiont), and find separate values for each condition (resting or exercise).\n\nCode editorCheck your workHintHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nWhat is the mean of the RQ for condition 1?\n\n\n\n\n ✓0.876\n\n\n ✗0.87\n\n\n ✗0.973\n\n\n\n\n\n\n\nUse the pipe to string together your functions.\n\n\nHere’s how you set up the summarize() function:\n\nsummarize(averageRQ = mean(________, na.rm=TRUE), \n          medianRQ = median(_______, na.rm=TRUE))\n\n\n\n\ndata |&gt;\n  group_by(________) |&gt;\n  summarize(averageRQ = mean(________, na.rm=TRUE), \n            medianRQ = median(_______, na.rm=TRUE))\n\n\n\n\ndata |&gt;\n  group_by(Condition) |&gt;\n  summarize(averageRQ = mean(RQ, na.rm=TRUE), \n            medianRQ = median(RQ, na.rm=TRUE))"
  },
  {
    "objectID": "Bio110_lesson_two.html#congratulations",
    "href": "Bio110_lesson_two.html#congratulations",
    "title": "Lesson 2: Central Tendency",
    "section": "Congratulations!",
    "text": "Congratulations!\nYou have finished this tutorial. You learned how to calculate the mean and median of data and how to use group_by() and summarize() to calculate the mean and median of specific groups within a column.\nAnother important kind of descriptive statistic is variability; that’s the topic of lesson three."
  },
  {
    "objectID": "Bio110_lesson_four.html#introduction",
    "href": "Bio110_lesson_four.html#introduction",
    "title": "Lesson 4: Introduction to Plots",
    "section": "Introduction",
    "text": "Introduction\nWelcome to lesson four, where you will learn the basics of graphing using a package called ggplot2. GGPlot is an excellent resource for creating many types of graphs, including histograms, box plots, scatterplots and more. We’ll start by introducing how ggplot works and then try creating a histogram.\nSee the home page for more details on how to use this tutorial and for troubleshooting tips!\n\nDataset\nWe will work with the physiology dataset, called data, that you have already seen.\nType the word data to recall what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWhen you examine the data table, you can see that there are some rows that are missing data for heart rate. In R, missing data are indicated by the letters ‘NA’. R will ignore these missing values when making a graph. Once you collect your own data, this is the way to enter any missing data into your data table."
  },
  {
    "objectID": "Bio110_lesson_four.html#ggplot-graphing",
    "href": "Bio110_lesson_four.html#ggplot-graphing",
    "title": "Lesson 4: Introduction to Plots",
    "section": "GGPlot graphing",
    "text": "GGPlot graphing\nThere are 3 main components of ggplot:\n\nData (data): This is your dataset\nAesthetics (mapping=aes()): This allows you to define your variables and define how you want your graph to look (color, size, shape, etc)\nGeometric Objects (geom_ ______): Define the type of plot (bar plot, scatter plot, histogram, etc)\n\nThe basic structure of ggplot() is as follows. You’ll notice that each of the three components above are included in this structure. Also notice that different lines (or properties) are connected using a +.\n\nggplot(data, mapping=aes()) +\n  geom_object()\n\n\nExample: Histogram\nLet’s look at an example to see how this works. We’ll start by creating a histogram. A histogram shows the distribution of data values.\nTry running the code below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis will create a histogram of the heart rate values. On the x-axis are intervals (bins) representing the different possible data values. On the y-axis are the frequencies with which different data values are present in the data set (once, twice, etc.).\nNotice how the code is set up:\n\nggplot(data, mapping=aes(x=heart_rate)) +\n  geom_histogram(bins=5)\n\n\nggplot(data ...): Specify the data right after the first parenthesis\naes(x = heart_rate): Specify the x variable (independent variable) and y variable (dependent variable) in the aes() argument. A histogram only requires an independent variable, so we did not specify the y variable.\ngeom_histogram(bins=5): Specify histogram as your chosen geom. You can also decide how many bins you’d like with the bins=5 argument. Try changing the 5 to a different number and running the code again, see what happens!\nChain together the function ggplot() with the geom geom_histogram() using a +.\n\n\nTry it out\nYour turn to give it a try! Make a histogram of the RQ values for our data.\n\nCode editorHintHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHere’s the basic structure. Click the next hint for more detailed structure.\n\nggplot(data, mapping=aes(___________))+\n      geom_histogram(______________)\n\n\n\n\nggplot(data, mapping=aes(x=______))+\n      geom_histogram(bins=_____)\n\n\n\nMake sure you use the proper capitalization and spelling for the x variable, exactly as it is shown in our data.\n\n\n\nggplot(data, mapping=aes(x=RQ))+\n      geom_histogram(bins=5)\n\n\n\n\n\n\n\nCustomizing a plot\n\nYou can change how a plot looks by adding the “color” and “fill” attributes to your geom_object(). color indicates the outline color and fill specifies the background color. Notice that we put the color name inside quotation marks. This is because the colors are character strings (i.e. lists of letters).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can adjust the labels of the plot by chaining on the labs() function: labs(x=\"x label\", y=\"y label\", title=\"title\") Again, we enclose the labels in quotation marks.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nTry it out\nYour turn to give it a try! Make a histogram of the RQ values for our data. As an extra challenge, add color and labels to your graph.\n\nCode editorHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHere’s the basic structure. Click the next hint for more detailed structure.\n\nggplot(data, mapping=aes(___________))+\n      geom_histogram(______________)+\n      labs(_____________)\n\n\n\n\nggplot(data, mapping=aes(x=______))+\n      geom_histogram(bins=_____, color=\"_____\", fill=\"_______\")+\n      labs(x=\"______\", y=\"_______\", title=\"_______\")\n\n\n\n\nggplot(data, mapping=aes(x=RQ))+\n      geom_histogram(bins=5, color=\"pink\", fill=\"darkorange\")+\n      labs(x=\"Respiratory Quotient\", y=\"Count\", title=\"Histogram of Respiratory Quotient for Physiology Data\")\n\n\n\n\nGreat work!\n\n\nOther ggplot resources\nThere are LOTS of resources online where you can learn about making plots with ggplot. Here are a few to start with:\n\nggplot cheatsheet PDF\nposit.cloud ggplot cheatsheet website version\nBio110 tutorial cheatsheet - ggplot section"
  },
  {
    "objectID": "Bio110_lesson_four.html#congratulations",
    "href": "Bio110_lesson_four.html#congratulations",
    "title": "Lesson 4: Introduction to Plots",
    "section": "Congratulations!",
    "text": "Congratulations!\nHooray! You have completed lesson four. You have learned the basics of creating a plot using GGPlot. Lesson five will teach you how to make a scatterplot and boxplot."
  },
  {
    "objectID": "Bio110_lesson_six.html#introduction",
    "href": "Bio110_lesson_six.html#introduction",
    "title": "Lesson 6: Bar Graphs",
    "section": "Introduction",
    "text": "Introduction\nWelcome. In this lesson, you will learn how to create simple bar graphs and clustered bar graphs, and how to add error bars to both types of graphs.\nWe’ll continue to use ggplot, which was introduced in lesson 4.\nSee the home page for more details on how to use this tutorial and for troubleshooting tips!"
  },
  {
    "objectID": "Bio110_lesson_six.html#dataset",
    "href": "Bio110_lesson_six.html#dataset",
    "title": "Lesson 6: Bar Graphs",
    "section": "Dataset",
    "text": "Dataset\nA dataset called bargraphdata has been loaded into this tutorial.\nType its name so that you can see what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIt would also be good to understand the structure of the different variables. Type the command that allows you to see the structure of bargraphdata.\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nstr(bargraphdata)\n\n\n\nThis dataset contains three variables. The data come from an experimental field study that lasted three years and involved 40 study plots. Each plot received one of two different experimental treatments.\n\nThe first variable, var1, is a measurement that was made in each of the plots; this variable is numerical.\nThe second variable, treatment, refers to whether a particular study plot received treatment A or treatment B; this is a factor (category) variable.\nThe third variable, year, refers to the year in which the measurement was made."
  },
  {
    "objectID": "Bio110_lesson_six.html#bar-graphs",
    "href": "Bio110_lesson_six.html#bar-graphs",
    "title": "Lesson 6: Bar Graphs",
    "section": "Bar Graphs",
    "text": "Bar Graphs\nSuppose you want to make a bar graph that compares the means of var1 for each of the two treatments. For now, imagine that you do not care about the year the measurement was made.\n\nIdentify data\nThe first thing you need to do is to identify the data that will be used to make each bar. Right now all of the data values for both bars are part of the same variable, var1. So we’ll need to sort our data into groups (treatment A and B) and then calculate the mean for each group.\n\n\nWhich functions do you think we could use to group our data and then calculate the mean for each group?\nHint: You learned about it in lesson two.\n\n\n\n\n ✗summarize() and select() and mean()\n\n\n ✗filter() and mean()\n\n\n ✓group_by() and summarize() and mean()\n\n\n\n\n\n\nIf you weren’t sure which function to choose or what these functions do, review lesson 2.\nFirst, we’ll use group_by() to group our data by different treatment groups. Then we use summarize() to calculate the mean of each group. Try this now:\n\nCode editorHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFirst, specify your dataset, called bargraphdata. Remember to use the pipe to string the functions together.\n\n\nHere’s the basic setup:\n\nbargraphdata |&gt; \n  group_by(______) |&gt;\n  summarize(avgVar1 = ________)\n\n\n\n\nbargraphdata |&gt; \n  group_by(treatment) |&gt;\n  summarize(avgVar1 = mean(var1))\n\n\n\n\nYou should get a chart displaying the means of each treatment group. But, we need to be able to input that data into our graph, so we’ll save it as a new variable.\nCopy and paste your code from the previous exercise and save it to a new variable called tmtsummary.\n\nCode editorHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nRemember to use &lt;- to assign data to a new variable name.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nNow we can graph! We’ll use the same structure we did to create a histogram, boxplot and scatterplot, but we’ll use the geometry geom_col() to make our graph. Chain it onto the main ggplot() function using a + and use tmtsummary as your data.\nYour x variable will be treatment and your y variable will be the name that you created for the mean of variable 1. In my answer example, it is called avgVar1, but you can use any name, as long as you defined it in the code chunk above.\n\nCode editorHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHere’s the basic structure:\n\nggplot(____, mapping = aes(______))+\n  geom_ ______()\n\n\n\n\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1))+\n  geom_col()\n\n\n\n\n\n\nLabels and color\nNow let’s learn how to add color to the graph. We can color the bars by treatment, so that each treatment is a different color. Use your same code as before and type fill=treatment into the aes() command, after the x and y variables. Use a comma to separate the fill color from the x and y variables.\nGive it a try now! Also add labels to your graph.\n\nCode editorHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHere’s the basic structure:\n\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1, _______))+\n  geom_col()+\n  labs(________)\n\n\n\n\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1, fill=treatment))+\n  geom_col()+\n  labs(x=\"Treatment\", y=\"Average Variable 1\", title = \"Bar graph of the Mean of Variable 1 for Treatment A and B\")\n\n\n\n\n\n\nAdding error bars\nIn lesson three, you learned about the importance of describing the variability in the data as well as its central tendency. This bar graph does not show the variability in var1. You can do that by adding error bars to the bars. The error bars can represent whatever measure of variability you choose: standard deviation, standard error, or 95% confidence limits.\n\nCompute measure of variability\nTo add error bars to your graph, you first need to compute the values for the measure of variability you have chosen to use. In this example, let’s use the standard deviation.\nWe’ll return to our group_by() and summarize() functions. Use the exact same code you used to create tmtsummary and add a calculation for standard deviation in summarize(). Save this summarized data to the same variable name tmtsummary. Give it at try!\n\nCode editorHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYour summarize command will have the structure:\n\nsummarize(avgVar1 = mean(var1),\n          ______ = _____(____))\n\nAll the other code will be the same as when you first defined tmtsummary\n\n\n\ntmtsummary &lt;- ________ |&gt; \n  group_by(______)|&gt;\n  summarize(avgVar1 = mean(var1),\n            _____ = sd(_____))\n\n\n\n\ntmtsummary &lt;- bargraphdata |&gt; \n  group_by(treatment)|&gt;\n  summarize(avgVar1 = mean(var1),\n            sdVar1 = sd(var1))\n\n\n\n\nNow we have our standard deviation data and we can use that to create error bars. The geom function for error bars is geom_errorbar(). We’ll add an aesthetics argument to specify the max and min for the error bar.\nHere’s how the error bar code will look:\n\n\ngeom_errorbar(mapping=aes(ymin = _______,\n                          ymax = _______))\n\n\nTry adding this command to your bar graph. Fill in the ymin and the ymax. Note that: the minimum error bar value is the ‘mean of var1 - sd of var1’ and the maximum error bar value is the ‘mean of var1 + sd of var1’.\n\nCode editorHintHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCopy and paste your code from the previous graph and chain on the geom_errorbar() function.\n\n\nYour geom_errorbar() function should look like:\n\ngeom_errorbar(mapping=aes(ymin = avgVar1-sdVar1,\n                          ymax = avgVar1+sdVar1))\n\n\n\nDid you define the data tmtsummary and include a calculation for standard deviation in it? Are all your variables spelled correctly? Are there enough parentheses?\n\n\n\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1, fill=treatment))+\n  geom_col()+\n  labs(x=\"Treatment\", y=\"Average Variable 1\", title = \"Bar graph of the Mean of Variable 1 for Treatment A and B\")+\n  geom_errorbar(mapping=aes(ymin = avgVar1-sdVar1,\n                          ymax = avgVar1+sdVar1))\n\n\n\n\n\n\n\n\n\n\nBonus challenge question\n\n\n\n\n\nCan you think of a way to use the pipe (|&gt;) to join the group_by()/summarize() functions with ggplot()?\nYou won’t need to define a new variable tmtsummary if you use this method. Give it a try - you may find it’s actually easier than the previous method!\n\nCode editorHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAfter the summarize() function, simply pipe your data to ggplot(). Then, in ggplot(), you don’t need to specify a dataset because it’s included in the pipe!\n\n\nHere’s the general setup:\n\nbargraphdata |&gt; \n  group_by()|&gt;\n  summarize() |&gt; \n  ggplot() + \n    geom_col()\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nIf you would rather show standard error bars and you have loaded plotrix, you can substitute std.error for sd and get a bargraph with standard error bars."
  },
  {
    "objectID": "Bio110_lesson_six.html#clustered-bar-graph",
    "href": "Bio110_lesson_six.html#clustered-bar-graph",
    "title": "Lesson 6: Bar Graphs",
    "section": "Clustered bar graph",
    "text": "Clustered bar graph\nSuppose you were interested in a bar graph that not only compared the treatments, but also displayed if and how the years differed from each other. You can do this with what is called a clustered bar graph.\nIn this case, a clustered bar graph would have six different bars, one for each combination of treatment (A and B) and year (1, 2, and 3).\n\nSpecifying data and variables\nTo create a clustered bar graph, we’ll chain on the command facet_wrap(~variableName) to our chain of ggplot functions.\nFor the most part, we can copy all our previous code, with just a few edits. Here’s the code we used to create our graph. Yours may look slightly different, but that’s ok!\nWe’ve also included code to make a clustered bar graph, clustered by year. Take a look at what’s different.\nFinally, run the clustered bar graph code in the code editor!\n\nNon-clustered bar graph codeClustered bar graph codeCode editor\n\n\n\ntmtsummary&lt;- bargraphdata |&gt; \n  group_by(treatment)|&gt;\n  summarize(avgVar1 = mean(var1),\n            sdVar1 = sd(var1)) \n\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1, fill=treatment))+\n  geom_col()+\n  labs(x=\"Treatment\", y=\"Average Variable 1\", title = \"Bar graph of the Mean of Variable 1 for Treatment A and B\")+\n  geom_errorbar(mapping=aes(ymin = avgVar1-sdVar1,\n                            ymax = avgVar1+sdVar1))\n\n\n\n\ntmtsummary&lt;- bargraphdata |&gt; \n  group_by(treatment, year)|&gt;\n  summarize(avgVar1 = mean(var1),\n            sdVar1 = sd(var1)) \n\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1, fill=treatment))+\n  geom_col()+\n  labs(x=\"Treatment\", y=\"Average Variable 1\", title = \"Bar graph of the Mean of Variable 1 for Treatment A and B\")+\n  geom_errorbar(mapping=aes(ymin = avgVar1-sdVar1,\n                            ymax = avgVar1+sdVar1))+\n  facet_wrap(~year)\n\n\n\nTry copying and pasting the code for the clustered bar graph to see what it does!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nHere are the edits made for the clustered bar graph:\n\nLine 2: group_by(treatment, year): We’re now interested in displaying treatment and year, so we want to group by both of those variables\nLine 11: facet_wrap(~year): Tells R to cluster the bar graphs by year.\n\n\nChanging the cluster variable\nWhat if you wanted your bar graph to be clustered by treatment instead of year?\nGive it a try! It’s not quite as simple as changing the facet_wrap() to treatment… there’s a couple other edits you have to make. Mess around a bit and see if you can figure it out. After you try it yourself, use the hints to help you figure out what else you need to edit in your code.\n\nCode editorHintHintHintAnswerBonus - improve the legend\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIn line 11, change facet_wrap(~year) to facet_wrap(~treatment)\n\n\nLine 7: You’ll need to change your x variable. It won’t be treatment anymore because treatment is now the cluster variable NOT the variable on the x axis.\n\n\nHopefully you changed your x variable to year. Finally, also change the fill color to year (also line 7 in the aes() argument).\n\n\n\ntmtsummary&lt;- bargraphdata |&gt; \n  group_by(treatment, year)|&gt;\n  summarize(avgVar1 = mean(var1),\n            sdVar1 = sd(var1)) \n\nggplot(tmtsummary, mapping = aes(x=year, y=avgVar1, fill=year))+\n  geom_col()+\n  labs(x=\"Treatment\", y=\"Average Variable 1\", title = \"Bar graph of the Mean of Variable 1 for Treatment A and B\")+\n  geom_errorbar(mapping=aes(ymin = avgVar1-sdVar1,\n                            ymax = avgVar1+sdVar1))+\n  facet_wrap(~treatment)\n\n\n\nYou may notice that the legend looks a little odd - it is continuous and doesn’t show 3 separate values. This is because R thinks the year data is numerical, but we are treating it as a categorical (factor) variable.\nTry changing the year data to factor data and then rerunning the code to fix the legend. If you need a refresher on how to do switch a variable to a factor variable, check out lesson 5.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Bio110_lesson_six.html#congratulations",
    "href": "Bio110_lesson_six.html#congratulations",
    "title": "Lesson 6: Bar Graphs",
    "section": "Congratulations",
    "text": "Congratulations\nThat’s it! Now you know how to use bar graphs to di splay your data, including adding error bars and creating clustered bar graphs. Remember that if the distribution of data values is highly non-normal, boxplots are a more appropriate form of graphical display than bar graphs.\nNext lesson, we’ll learn some basic statistics."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bio 110 Tutorials",
    "section": "",
    "text": "Welcome to the BIO 110 tutorial site! Here you can find tutorials that will teach you how to work with data."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Bio 110 Tutorials",
    "section": "",
    "text": "Welcome to the BIO 110 tutorial site! Here you can find tutorials that will teach you how to work with data."
  },
  {
    "objectID": "index.html#how-to-use-these-tutorials",
    "href": "index.html#how-to-use-these-tutorials",
    "title": "Bio 110 Tutorials",
    "section": "How to use these tutorials",
    "text": "How to use these tutorials\nHere’s a quick introduction for how to use the tutorials:\n\nUse the bar at the top of the website to navigate between tutorials.\nThe tutorials sometimes take a little time to load, wait until there is a green circle that says Ready! under “WEBR STATUS” at the top of the page.\nThere are interactive code editors throughout the tutorials. Click the green “run code” button to run them.\n\nSometimes, there is an option to see a hint, check your work or see the answer. You are encouraged to try writing the code yourself before looking at a hint or the answer. You can also click the “Check your work” button if you want a way to see if you did it right without giving away the answer.\nWithin a code editor, everything is considered code and will run when you click “run code”. You can tell R to IGNORE a line by using a # in front of the line. This is called commenting.\n\n\n\nTrouble Shooting\n\nSometimes, code chunks use the output from previous code chunks to run. So, it’s important to go through each tutorial sequentially. If you get an error message that says “Error: object not found”, it is probably because you didn’t run the previous code chunks, or because you typed the code wrong.\n\nYou can do separate tutorials out of order, as they do not rely on each other to run. For example, it’s fine to do lesson 4 before lesson 2.\n\nYou can refresh the page to restart, but this will delete any code you’ve already completed.\nError: If you get an error message, check that you included all the parenthesis, quotation marks and capitalization (R is case sensitive).\n\nIf that still doesn’t work, try copying and pasting the given answer and running the code. If that doesn’t work, you probably forgot to run a previous code chunk or properly define a variable."
  },
  {
    "objectID": "Bio110_lesson_three.html#introduction",
    "href": "Bio110_lesson_three.html#introduction",
    "title": "Lesson 3: Variability",
    "section": "Introduction",
    "text": "Introduction\nWelcome! In this lesson you will learn about measures of variability. You’ll learn how to find the standard deviation, variance, standard error, and confidence intervals. You’ll also practice subsetting data with the group_by() and filter() functions.\nSee the home page for more details on how to use this tutorial and for troubleshooting tips!"
  },
  {
    "objectID": "Bio110_lesson_three.html#variation-around-a-central-tendency",
    "href": "Bio110_lesson_three.html#variation-around-a-central-tendency",
    "title": "Lesson 3: Variability",
    "section": "Variation Around a Central Tendency",
    "text": "Variation Around a Central Tendency\nYou have already learned that one important way to summarize a set of data values is with a measure of central tendency, the mean or the median.\nAnother important summary statistic is the amount of variation around that central tendency.\n\nDataset\nThis lesson contains a dataset that you will work with, named data. You have already worked with these data, in lesson one and two.\nType the word data to recall what it contains.\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nThe dataset contains physiological data for a sample of individuals.\nYou can determine how many entries are in the dataframe by using the command nrow(data). Try that now.\n\nCode editorAnswer\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nnrow(data)\n\n\n\n\n\nHow many different individuals are in the sample?\n\n\n\n\n ✗9\n\n\n ✓14\n\n\n ✗18\n\n\n\n\n\n\n\nVariance\nOne common measure of variability is the variance. The variance is the square of the average difference between each data value and the mean.\nYou can compute the variance of a variable with the var() function.\nUse var() to compute the variance of the RQ for the two conditions exercise (1) and resting (2), found in the Condition column.\n\nCode editorHintHintAnswerCheck your work\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUse group_by() and summarize(), and string the functions together with the pipe (|&gt;).\nDon’t forget to add na.rm=TRUE in the var() function.\n\n\n\ndata |&gt; \n  group_by(_____) |&gt; \n  summarize(varianceRQ = var(______, na.rm=TRUE))\n\n\n\n\ndata |&gt; \n  group_by(Condition) |&gt; \n  summarize(varianceRQ = var(RQ, na.rm=TRUE))\n\n\n\n\nWhat is the variance of the respiratory quotient for the resting group (condition 2)?\n\n\n\n\n ✗1.80123\n\n\n ✓0.00176\n\n\n ✗0.001995\n\n\n\n\n\n\n\n\n\n\nStandard Deviation\nAnother common measure of variance is the standard deviation, which is simply the square root of the variance. The function for standard deviation is sd().\nCompute the standard deviation of RQ for each of the two conditions.\n\nCode editorHintHintAnswerCheck your work\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUse group_by() and summarize(), and string the functions together with the pipe (|&gt;).\nDon’t forget to add na.rm=TRUE in the sd() function.\n\n\n\ndata |&gt; \n  group_by(_____) |&gt; \n  summarize(stdDevRQ = sd(______, na.rm=TRUE))\n\n\n\n\ndata |&gt; \n  group_by(Condition) |&gt; \n  summarize(stdDevRQ = sd(RQ, na.rm=TRUE))\n\n\n\n\nWhat is the variance of the respiratory quotient for the exercise group (condition 1)\n\n\n\n\n ✗0.0419\n\n\n ✓0.0447\n\n\n ✗0.0223"
  },
  {
    "objectID": "Bio110_lesson_three.html#standard-error-and-confidence-intervals",
    "href": "Bio110_lesson_three.html#standard-error-and-confidence-intervals",
    "title": "Lesson 3: Variability",
    "section": "Standard error and confidence intervals",
    "text": "Standard error and confidence intervals\nOne reason to compute the variability in a data set is to get an idea of how accurately our sample has estimated the mean of a population. Two additional measures of variability, standard error and confidence intervals, do this more usefully than variance or standard deviation.\nThis is because both standard error and confidence intervals become smaller as the sample size (or number of data values) gets larger – which reflects our increased certainty that our sample mean represents the true population mean.\n\nStandard Error\nTo compute the standard error of a set of data in R, a package called plotrix is required. In this tutorial, plotrix has already been installed for you.\nThe function for computing the standard error is std.error().\nCompute the standard error of RQ for each of the two conditions.\n\nCode editorHintHintAnswerAlternate tidyverse answerCheck your work\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUse the same syntax as you did for computing standard deviation and variance, just with a new formula. Don’t forget to use the pipe to string your functions together!\n\n\n\ndata |&gt;\n  group_by(______) |&gt;\n  summarize(______ = std.error(_____, na.rm=TRUE))\n\n\n\n\ndata |&gt;\n  group_by(Condition) |&gt;\n  summarize(stdErrorRQ = std.error(RQ, na.rm=TRUE))\n\n\n\n\ndata |&gt;\n  group_by(Condition) |&gt;\n  summarize(stdErrorRQ = sd(RQ, na.rm=TRUE)/sqrt(n()))\n\n\n\n\nWhat is the standard error of RQ for the exercise condition?\n\n\n\n\n ✓0.0169\n\n\n ✗0.1238\n\n\n ✗0.0447\n\n\n\n\n\n\n\n\n\n\nConfidence Intervals\nConfidence intervals are closely related to standard error. The 95% confidence interval is a range of data values that enclose the sample mean. There is a 95% probability that the “true” mean lies within the 95% confidence interval of the sample mean.\nThe easiest way to compute a 95% confidence interval is to use the t.test() function.\nThe command for the t-test is t.test(data$variableName)\nLet’s compute the 95% confidence interval of the variable heart_rate.\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nt.test(data$heart_rate)\n\n\n\n\nIn the output, you should see the name of your variable, followed by two lines of information that are not relevant if you are only interested in knowing the 95% confidence interval. The 95% confidence interval is on the following line, followed by a computation of the sample mean.\nThe 95% confidence interval for the heart rate variable is between 61.08295 and 75.91705. We read this as: There is a 95% probability that the “true” mean lies between 61.08 and 75.92.\n\n\nSubsetting Data with the Filter() Function\nWhat if we wanted to find a 95% confidence interval for each condition (exercise and resting)?\nWe will use the filter() function to extract data with a specific condition.\nThe syntax is: filter(data, columnName == \"some value\")\n\nArguments used:\n\ndata: Input your original data set\ncolumnName == \"some value\" Choose a column you’d like to filter (columnName) and then replace some value with whatever condition you would like to specify.\nYou can also replace the == with other operators including:\n\n&gt; (greater than)\n&lt; (less than)\n&lt;= (less than or equal to)\n&gt;= (greater than or equal to)\n== (equal to)\n!= (not equal to)\n\n\n\nLet’s see how this works with an example:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf you run this example, you should see data, but it will only show rows where the condition is “1”.\nNow, let’s save this data as a new variable. Recall you can use &lt;- to assign data to a new variable. Try creating a new variable that includes all the rows for which the Condition is equal to “1”. Call your new variable exerciseData.\n\nCode editorHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUse the same code in the example: filter(data, Condition == \"1\") but assign it to a new variable name exerciseData.\n\n\n\nexerciseData &lt;- filter(data, Condition == \"1\")\n\n\n\n\nNow that you’ve created your variable, type exerciseData to see if it worked!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFinally, let’s find the 95% confidence interval for the RQ values measured under Condition 1.\nPerform a t.test on your new dataset exerciseData, on the RQ column.\n\nCode editorHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTry something like t.test(______$______)\n\n\n\nt.test(exerciseData$RQ)\n\n\n\n\nSo for these data, the (rounded) sample mean is 0.876, and the 95% confidence interval ranges from a minimum value of 0.834 to a maximum of 0.917.\n\n\nCongratulations!\nYou’ve completed lesson three, in which you learned how to compute several measures of variability: variance, standard deviation, standard error, and confidence intervals. You also learned ways to subset a data set using group_by() and filter().\nIn lesson four you will learn how to make plots. You’ll start with a box plot and histogram, which are a basic ways of graphically displaying the central tendency and the variability of any data set."
  },
  {
    "objectID": "Bio110_lesson_one.html#introduction",
    "href": "Bio110_lesson_one.html#introduction",
    "title": "Lesson 1: R Introduction, Working with Datasets",
    "section": "Introduction",
    "text": "Introduction\nWelcome to this introduction to R. You will learn how to enter data and to perform some basic operations. R is a programming language that is used to work with data. It can do lots of things, including basic arithmetic.\nFirst, let’s try using R. In the code chunk right below this, try typing in a basic math problem, like 35*10. Click the green run code button and see what happens.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe rest of this tutorial will teach you how to work with data in R. It is interactive, so you’ll be able to write your own code in code chunks like the one above throughout the tutorial. See the home page for more details on using the tutorials and for troubleshooting tips!\nThere are also hints and answers for most code chunks. Try to do each problem on your own, but feel free to use the hints and answers if you get stuck and to check your work!"
  },
  {
    "objectID": "Bio110_lesson_one.html#working-with-data",
    "href": "Bio110_lesson_one.html#working-with-data",
    "title": "Lesson 1: R Introduction, Working with Datasets",
    "section": "Working with data",
    "text": "Working with data\nR is a program for dealing with data. In Biology courses, most of the time your data will be in the form of a table with columns and rows.\nWe will start by working with a very simple set of data: data for a single variable. Later on, you will learn how to import your own data table into R in order to work with it.\nFor example, suppose you have measured the diameters of a sample of 8 bacterial colonies. The data values (in mm) are: 4, 3.5, 6.1, 2.2, 4.7, 3, 5.2, and 4.6.\n\nAssigning values to a variable name\nIn R, you ‘assign’ these values to a variable name using an ‘arrow’ formed by the ‘less than’ symbol and the dash, like this: &lt;-.\nOn the left side of the arrow, put the name of the variable you wish to create. The name should be short, descriptive, and must not contain any spaces.\nOn the right of the arrow, type c(your data values here). The c stands for ‘concatenate’ or ‘combine’ all the values into a single vector of values. In the parentheses, type your data values, separated by commas.\nThis command creates a variable called ‘diam’ that contains our example data values:\ndiam &lt;- c(4, 3.5, 6.1, 2.2, 4.7, 3, 5.2, 4.6)\nNow you try creating the diam variable using these same data. In the code chunk below, type in a command to create diam.\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nIf you want to see what a variable contains, you can just type its name. R is case-sensitive, so be careful about whether you type in upper or lower case.\nTry typing diam and see what you get.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nImporting data\nNext, we’ll learn how to import and use large amounts of data. Specifically, we’ll use R to view our data as a dataframe. A dataframe is just the R version of a data table.\nWe’ll start with a .csv file. We can then use R to convert the .csv file into a dataframe, which will be much easier to work with.\nThe command we’ll use is: myDataFrame &lt;- read.csv(\"myCSVFile.csv\").\n\nOn the left side of the arrow, you’ll create a name for your dataframe and write that instead of myDataFrame.\nOn the right side of the arrow, in the quotation marks, you’ll write the name of your CSV file.\n\nWe have pre-loaded a CSV file into this tutorial. It is called “physiology_data.csv”. Let’s try converting the CSV file into a dataframe in the code chunk below. We’ll name the dataframe data.\n\nCode editorHintHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThe name of your dataframe should not be in quotes, but the name of the .csv file should be in quotes.\n\n\n__________ &lt;- read.csv(\"physiology_data.csv\")\n\n\n\ndata &lt;- read.csv(\"physiology_data.csv\")\n\n\n\n\n\n\nOur data\nNow, let’s check if you did it right. In R, you can type the name of a dataframe to see it displayed. Try typing data into the code chunk below.\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYou can see that this dataframe contains 4 variables and 15 rows. (Also, each row is numbered sequentially; these numbers are not considered a variable.)\nThese data are from a physiological study. Each individual’s respiratory quotient (RQ) was measured, either after exercise (1), or during rest (2). Their heart rates in beats per minute were also measured. NA stands for ‘not available,’ meaning that the data for these combinations of individual and variable were lost or not recorded.\n\n\nUsing data tables\n\nDataframe set up:\n\nIn an R dataframe, each column represents a different variable.\nEach observational unit is represented by a separate row in the table.\nThe first row of the table contains the names of the different variables. In R, variable names cannot contain any spaces.\n\n\n\nSpecifying Variables\nYou might wish to see just one of the variables in this data file. The way to specify an individual variable is to use the name of the data file, followed by the dollar sign, $, followed by the name of the variable with no spaces.\nThe syntax is: yourDataName$variableName\nWhat would you type to see a list of the heart_rate data values in this file?\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\ndata$heart_rate\n\n\n\n\n\n\n\nData Structure\nIn R, each variable is encoded as either numeric (a number), integer (a whole number), a factor (a category, expressed either as a word or a number), or character (a string of letters). There are other less common variable properties as well. A variable’s property is important because some operations can only be carried out on variables with certain properties.\nA data file’s ‘structure’ refers to the properties of its variables. To find out the properties of all the variables in a data set, you would use the command str(yourDataName), using the name of your data file in place of the placeholder here.\nWrite a command that will allow you to see the structure of data.\n\nCode editorAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nstr(data)\n\n\n\n\n\nChanging a variable’s property\nYou can see that the variable data$Condition is currently encoded as an integer. But it is actually a category variable.\nYou can change a variable’s property with the assignment arrow, in the following way: yourDataName$variableName &lt;- as.variableType(yourDataName$variableName).\nFor example, to change the property of the Condition variable to a factor variable, you can run: data$Condition &lt;- as.factor(data$Condition).\nTry changing the variable named Individual to a factor variable. You will notice that a little prompt box shows up. You can save yourself some typing by choosing the rest of the expression from among the choices in the prompt box.\n\nCode editorCheck your workHintAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nRun the structure command again to see if Individual has been changed to a factor variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nRemember to use the dollar sign notation, and that R is case-sensitive.\n\n\n\ndata$Individual &lt;- as.factor(data$Individual)"
  },
  {
    "objectID": "Bio110_lesson_one.html#r-packages",
    "href": "Bio110_lesson_one.html#r-packages",
    "title": "Lesson 1: R Introduction, Working with Datasets",
    "section": "R Packages",
    "text": "R Packages\nR has a set of commands that it understands automatically. But, there are other commands that you can teach R. These “extra” commands live in packages that you can install and then use when you code with R.\nThroughout this tutorial, we’ve been using something called the tidyverse package to run commands. It contains helpful commands for viewing and rearranging data as well as graphing data (which we’ll get to in future tutorials).\ntidyverse was pre-installed for you, but if you ever have to install a package in the future, run the command:\n\ninstall.packages(\"tidyverse\")\n\nAfter installing the package, you can load it using the command:\n\nlibrary(tidyverse)\n\nIn this tutorial, you won’t need to worry about installing or loading packages, because they are pre-loaded for you. But when you start working on your own data outside of these tutorials, you will sometimes need to tell R to load certain packages."
  },
  {
    "objectID": "Bio110_lesson_one.html#congratulations",
    "href": "Bio110_lesson_one.html#congratulations",
    "title": "Lesson 1: R Introduction, Working with Datasets",
    "section": "Congratulations!",
    "text": "Congratulations!\nYou have finished the first R tutorial. You have learned how to create a variable in R, import data and create a dataframe, and how to examine and change the properties of different variables."
  }
]