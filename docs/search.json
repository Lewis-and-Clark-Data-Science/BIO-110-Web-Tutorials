[
  {
    "objectID": "Bio110_lesson_five.html#introduction",
    "href": "Bio110_lesson_five.html#introduction",
    "title": "Lesson 5: Scatterplots",
    "section": "Introduction",
    "text": "Introduction\nWelcome to lesson five, where you will learn the basics of graphing using scatterplots.\nWe will work with the physiology dataset, called data, that you have already seen.\nType the word data to recall what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Bio110_lesson_five.html#scatterplots",
    "href": "Bio110_lesson_five.html#scatterplots",
    "title": "Lesson 5: Scatterplots",
    "section": "Scatterplots",
    "text": "Scatterplots\nSuppose we wanted to look at a scatterplot of the relationship between heart rate and respiratory quotient (RQ).\nWhen you examine the data table, you can see that there are some rows that are missing data for heart rate. In R, missing data are indicated by the letters ‘NA’. R will ignore these missing values when making a graph. One you collect your own data, this is the way to enter any missing data into your data table.\nAs you have learned, R has a function called plot that graphs the relationship between an independent and a dependent variable. When the independent variable is a factor variable, plot creates a box plot, as you saw in lesson four. When the independent variable is continuous (numeric), plot creates a scatterplot, as you will see in this lesson.\nThe basic plot function has this form: plot(yourdata$xvariable, yourdata$yvariable). You would need to substitute the actual names for your dataset and variables used as place-holders here.\nUse the plot command to plot the relationship between heart rate (on the x-axis) and RQ (on the y-axis). Be sure to use heart rate’s proper variable name.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nCopy the column names exactly to have the proper variable name.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$heart_rate,data$RQ)\n\n\n\n\n\nAdjust plot style\nNow that we have a basic graph, let’s learn how to adjust some of the plotting parameters to change things like color, text size, axis labels, axis limits, and point style.\nAll of the plotting parameters that can be adjusted can be found on the par help page. You cna find help for functions by typing a question mark followed by a function name into a code chunk. Type ?par to view this page and read through the graphical parameters.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nMany of the par functions can be used as arguments in the plot function. Simply place them after the x and y arguments and separate them with commas. For example, plot(data$heart_rate,data$RQ,col='red') would generate our original plot, but with red points.\n\nPoint Color\nTry generating the original plot with blue points. Be sure to put quotes around the color name.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntype col=“blue” following the y argument.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$heart_rate,data$RQ,col='blue')\n\n\n\n\nR can generate figures with virtually any color. Check out this linked pdf to see the colors that can be specified by name.\n\n\nType of point\nWe can also use graphical parameters to adjust the type of point that is plotted on our graph. We use the pch= argument for this.\nGenerate the original plot with blue points and pch=16. This will plot closed circles.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry plot(data$heart_rate,data$RQ,col='blue',pch=16)\n\n\n\nType the command to look at the help page for pch to see all of the possible symbols and their associated codes.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nType ?pch.\n\n\n\n\n\nPoint Size\nOur points are looking a little small. Let’s make them larger with the cex= argument, which expands the character by a factor you can specify. As a default, they are set to cex=1.\nRe-generate the original figure with blue, closed points and cex=1.5, i.e. points that are 1.5 times as large as before.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$heart_rate,data$RQ,col=\"blue\",pch=16,cex=1.5)\n\n\n\n\n\n\n\nAxis labels\nOur axis labels aren’t particularly clear or useful as is. Let’s change them using the xlab='' and ylab='' arguments. Because the labels are character strings, we need to enclose them in quotes.\nRe-generate the original figure with “Heart Rate” as the x-axis label and “RQ” as the y-axis label and all of the other updated graphical parameters. Specify the x-axis label before the y-axis label.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$heart_rate,data$RQ,col='blue',pch=16,cex=1.5,xlab='Heart Rate',ylab='RQ')\n\n\n\n\nNow you’ve learned the basics of creating a scatterplot when both the x and y variables are continuous. You know how to alter many aspects of your figure’s appearance to make it clearer.\n\n\nScatterplots with a categorical variable\nNext, we’ll look at making scatterplots when the independent (x) variable is categorical. When data are in the form of numbers, R can treat them either as continuous (numeric variables, in R language) or as categorical (factor variables, in R language).\nIn data the different measurements are categorized as having been made under either exercise (1) or resting (2) conditions.”\nSuppose you wanted to create a graph that compared the respiratory quotients (RQ) under these two conditions. To make sure that R will create a scatterplot from these data, rather than a boxplot, we need to make sure that it considers the Condition variable to be numeric. We can do that with this command: data$variable&lt;-as.numeric(data$variable).\nMake sure that data$Condition is a numeric variable. Be sure to substitute the actual variable name for the placeholder.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata$Condition&lt;-as.numeric(data$Condition)\n\n\n\n\nUse the plot function to graph the RQs of the two groups, exercise and resting.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that variable names are case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ)\n\n\n\n\nNotice that a scatterplot (rather than a boxplot) is only a good option for a categorical x-variable if there are only a few data values, as in this example.\n\nAxis labels on categorical scatterplot\nHowever, this scatterplot is not very easy to read. For one, the axis labels are not very clear. We can change the plotting parameters to improve the appearance of the figure.\nThe axis labels should be self-explanatory. We can change them by adding the xlab='___' and ylab='____' arguments to the plot command. Because these labels are character strings (i.e. lists of letters), we need to enclose them in quotation marks.\nYou can do this by adding axis label arguments to the plot command, within the parentheses, as you did when making box plots. For example, you might write: plot(data$x, data$y, xlab='my x-axis label', ylab='my y-axis label').\nTry it yourself, with ‘Condition’ as the x-axis label, and ‘RQ’ as the y-axis label.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that text is case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, xlab=\"Condition\", ylab=\"RQ\")\n\n\n\n\nThis is better, but still not clear enough. The values ‘1’ and ‘2’ represent the two categories, but values like 1.4 do not make sense. And the two groups of points should be centered on the x-axis.\n\n\nAxis limits\nTo center the points better, we can increase the limits of the x-axis, e.g. so that they range from 0.5 to 2.5.\nYou can do this by inserting xlim=c(0.5, 2.5) into the plot command: plot(data$x, data$y, xlim=c(0.5,2.5)).\nTry it now, adding new xlimits to the plot you have already created with axis labels.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember to put all text expressions in quotes.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, xlab=\"Condition\", ylab=\"RQ\", xlim=c(0.5,2.5))\n\n\n\n\n\n\nAdjust numeric labels\nWe also want to replace the existing numeric labels with the words ‘exercise’ and ‘resting’, centered under each cluster of points.\nTo do this, we first suppress the xaxis numbers, using the argument xaxt='n' in the plot command’s parentheses. This command means that the x axis text should be ‘null’, i.e. missing.”\nModify the plot command to suppress the x-axis text.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, xlab=\"Condition\", ylab=\"RQ\",xlim=c(0.5,2.5), xaxt='n')\n\n\n\n\nNow you have created a plot that has no numerical labels on the x-axis. We can now use the axis command to specify what our new x-axis should look like. This is a separate command that you execute after you have made your graph.\nThe syntax of this command is: axis(side, at=1:2,labels=c('category1name', 'category2name', etc.)). side indicates which axis of the graph to modify; at shows where along the x-axis the labels should be placed. Even though you have removed the old labels 1 and 2, R still knows where these positions are, and you can use them to place your labels under the clusters of points.\nAdd a new x-axis to your plot that labels the former ‘1’ category as ‘exercise’ and the former ‘2’ category as ‘resting’. For side, use a 1, which represents the bottom axis of the figure. First, you will need to recreate your plot and then execute this new command to create the labels.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nFirst, you’ll need to make your plot again by using the command from the previous code chunk.\nThen, on a new line, execute the axis() command to create labels on each cluster of points.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, xlab=\"Condition\", ylab=\"RQ\",xlim=c(0.5,2.5), xaxt='n')\n\naxis(1,at=1:2, labels=c(\"exercise\",\"resting\"))"
  },
  {
    "objectID": "Bio110_lesson_five.html#congratulations",
    "href": "Bio110_lesson_five.html#congratulations",
    "title": "Lesson 5: Scatterplots",
    "section": "Congratulations",
    "text": "Congratulations\nThat’s it! Now you’re an expert in making scatterplots. In lesson six, you’ll learn how to make two kinds of bar graphs."
  },
  {
    "objectID": "Bio110_lesson_seven.html#introduction",
    "href": "Bio110_lesson_seven.html#introduction",
    "title": "Lesson 7: Inferential stats",
    "section": "Introduction",
    "text": "Introduction\nIn this lesson you will learn how to perform some basic inferential statistics.\nWhen testing scientific hypotheses, we are trying to decide whether the pattern in our data supports the hypothesis or not.\nBut some apparent patterns can be due to chance alone. Statistical inference gives us a way to compute the likelihood that an apparent pattern in our data could be due merely to chance.\n\nStatistical Significance\nMost scientists only accept a pattern as supporting a hypothesis if it is very unlikely that the pattern could be due to chance. We define an event as ‘very unlikely’ if it has a probability of .05 (5%) or less.\nStatistical inference involves using the data to compute the probability – the p-value – that a pattern could have arisen by chance. If the p-value associated with a test is less than or equal to 0.05, we conclude that the pattern is statistically significant. In other words, the pattern is highly unlikely to have arisen by chance."
  },
  {
    "objectID": "Bio110_lesson_seven.html#dataset",
    "href": "Bio110_lesson_seven.html#dataset",
    "title": "Lesson 7: Inferential stats",
    "section": "Dataset",
    "text": "Dataset\nIn this tutorial you will work with a sample dataset called sampledata that has already been imported into the tutorial.\nWrite the command for looking at the structure of sampledata so you can see what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe structure function is str(datafilename).\n\n\n\nYou should also look at the values in the table. Write the command to display the data file.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nJust type the name of the file\n\n\n\nYou can see that sampledata contains 30 different observations (rows) and 5 variables (columns).\n\nWeight, length, and repro are numerical variables.\nTemp is a factor variable with two levels, A and B.\nDiet is an integer variable, but in this data set, we will want to use it as a factor variable: the experimental organisms were fed one of three possible types of diet.\n\nWrite a command that will convert diet to a factor variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nYou will need to use the as.factor() function.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nsampledata$diet&lt;-as.factor(sampledata$diet)"
  },
  {
    "objectID": "Bio110_lesson_seven.html#statistical-analysis-with-continuous-variables",
    "href": "Bio110_lesson_seven.html#statistical-analysis-with-continuous-variables",
    "title": "Lesson 7: Inferential stats",
    "section": "Statistical Analysis with Continuous Variables",
    "text": "Statistical Analysis with Continuous Variables\nLet’s start by thinking about situations where both the independent and dependent variables are continuous. You are interested in knowing if there is an association or a relationship between the values of the two variables. Does the value of one predict the value of the other?\nWe will work with the variables for weight and for length.\n\nWhat is the most appropriate kind of plot for looking at the possible relationship between two continuous variables?\n\n\n\n\n ✗histogram\n\n\n ✓scatterplot\n\n\n ✗barplot\n\n\n ✗boxplot\n\n\n\n\n\nWrite a command to plot the relationship between weight and length. Put length on the x-axis.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDid you remember to use the dollar sign to specify the data file, and that the x-variable goes first in the plot command?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(sampledata$length, sampledata$weight)\n\n\n\n\n\nRegression Analysis\nWe can carry out a regression analysis to find the equation for the best-fit line through the points. The command: model&lt;-lm(sampledata$weight~sampledata$length) performs a regression of weight (the y-variable) on length (the x-variable) and stores it in a variable called model. lm stands for ‘linear model.’\nIt is important to notice that in this command, the positions of the x- and y-variables are reversed from what they are in the plot command, and they are separated by a tilde (~) rather than a comma.\nWrite the command to perform a linear regression of weight on length for sampledata, and store it in a variable called weightreg.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry weightreg&lt;-lm(sampledata$weight~sampledata$length)\n\n\n\nTo see the line superimposed on your graph, you can give the command abline(model).\nWrite the command to add a regression line to your scatterplot. Don’t forget to substitute weightreg for model.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry abline(weightreg)\n\n\n\nYou can find the slope of the line and the y-intercept (the values m and b in the equation y = mx + b) by typing the name of the variable you created from your regression.\nWrite the code to find the slope and y-intercept of the best-fit line.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nYou named your regression variable weightreg\n\n\n\nThe output shows the values of the line’s y-intercept (-5.1502) and its slope (0.8149).\n\nIs it statistically significant?\nThe points fit the line quite well. It seems unlikely that this association could have happened just by accident, though it IS possible. We would like to know the probability that there is actually no relationship between these two variables, that the slope of the true line through them is actually zero (a flat line).\nWe can find the p-value by using the command summary(model).\nWrite the command to find the probability that the true slope of the line is zero. Don’t forget to use the name you gave your model variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe command is summary(weightreg)\n\n\n\nIn the ‘coefficients’ table, the line for sampledata$length shows a p-value, 4.7 x 10^-8, that is much smaller than 0.05. This means that you can conclude that the effect of length on weight in this sample is highly statistically significant."
  },
  {
    "objectID": "Bio110_lesson_seven.html#statistical-analysis-with-continuous-and-categorical-variables",
    "href": "Bio110_lesson_seven.html#statistical-analysis-with-continuous-and-categorical-variables",
    "title": "Lesson 7: Inferential stats",
    "section": "Statistical Analysis with Continuous and Categorical Variables",
    "text": "Statistical Analysis with Continuous and Categorical Variables\nNow consider a different data analysis situation. Suppose you did a study where you measured some continuous dependent variable under two different conditions, and you want to know if the two groups differ.\nAgain using sampledata, consider the categorical variable temp. Suppose we want to know whether weight differs depending on whether the temp category is A or B. In this situation, we would perform a t-test.\n\nVisualize data\nFirst it is a good idea to look at the data visually. We can most easily do this with a boxplot.\n\nTo create a boxplot that compares weights for the two different temp categories, what variable should go on the x-axis?\n\n\n\n\n ✗weight\n\n\n ✗length\n\n\n ✓temp\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the variable that defines the categories.\n\n\n\nIn lesson 3, you used the plot function to make both boxplots and scatterplots, depending on the nature of the independent variable (categorical or continuous). There is another boxplot command, creatively named boxplot.\nIn the boxplot command, any independent variable that is numeric is treated as a factor variable automatically. Its syntax is: boxplot(depvar ~ indepvar). Notice that, unlike the plot command, the dependent variable is listed first in the boxplot command, and the two variables are separated by a tilde (~). It is easy to get these two commands mixed up!\nUsing the boxplot function, write the command to make a boxplot of weights for the two temp categories\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nIn the parentheses, the dependent variable goes first, followed by the squiggle, and then the independent variable.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nboxplot(sampledata$weight~sampledata$temp)\n\n\n\n\nYou can see that the medians for the two sets of data values are different, but the values overlap quite a bit. Are they different enough that the difference is unlikely to be due to chance?\n\n\n2 Sample t-test\nWe can find out by performing a t-test. You used a t-test in lesson 3 to calculate the confidence interval for a single variable; this is called a one-sample t-test. This time you will do a two-sample t-test, which is a way of finding out whether two groups of data differ significantly.\nThere are two ways of writing the t-test command. If the data are in one variable, and the classification categories are in another, as they are in this case, we would write: t.test(data$depvar ~ data$catvar), using real file and variable names in place of these placeholders.\nWrite the command to perform a t-test to determine if weights for the different temperatures are significantly different.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry t.test(sampledata$weight~sampledata$temp)\n\n\n\nThe output shows a p-value (in this case, 0.2308) for the probability that a difference this large could be due to chance alone. Since p is greater than 0.05, we should conclude that the differences in weights are NOT statistically significant. The two groups might really have similar weights, but just by chance, we sampled heavier individuals in one group than in the other.\nSometimes the data for the two groups we would like to compare with a t-test are in two different variables of our data table.\nWhen that is the case, we use this command: t.test(varA, varB). If we wished, we could use the subset command to create two separate variables from sampledata$weight, but this would be an unnecessary extra step. If we did this, though, we would get the same result.\nIt is important to remember, though, that t-tests are designed for data values with a normal distribution. Sometimes data are very non-normal. For example, go back and look at the variable repro.\nYou can see that there are a very large number of zeroes. This is often a good indication that the mean is not the center of the data distribution.\n\n\nWilcoxon test\nThere is an alternative to the t-test that does not require the data to have a normal distribution. It is called a Wilcoxon test (also sometimes a Mann-Whitney Test).\n\nVisualize data\nBefore doing a statistical test, though, write some code to make a boxplot showing how the values of repro differ for the two temperatures.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nPut the y-variable first, followed by the squiggle, and then the x-variable.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nboxplot(sampledata$repro~sampledata$temp)\n\n\n\n\nOnce again, the medians differ, but the data values for the two groups overlap.\n\n\nWilcoxon test\nTo carry out a Wilcoxon test, use the command: wilcox.test(data$depvar~data$catvar).\nWrite the command to perform a Wilcoxon test to determine whether values of repro differ for the two temp conditions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry wilcox.test(sampledata$repro~sampledata$temp)\n\n\n\nIt’s fine to ignore the warning values that you see whenever the data contain duplicate values.\nYou can see that the p-value (.076) tells you that the differences are NOT statistically significant, though they are nearly so.\n\n\n\nANOVA Test\nAnother data analysis situation you might encounter is the need to compare more than two groups with each other. This is done with a test called an analysis of variance (ANOVA).\nSuppose we wanted to know whether diet had an effect on the length of the organisms in our sample. Notice that there are 3 diet categories.\n\nVisualize data\nWrite a command to create a boxplot for length as a function of diet category.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nLength is the dependent variable, diet is the independent variable.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nboxplot(sampledata$length~sampledata$diet)\n\n\n\n\nWe can see that length is quite different between diets 1 and 2, but not nearly as different between diets 2 and 3. Are these differences statistically significant?\n\n\nANOVA test\nThe command to perform an ANOVA is: model&lt;-aov(depvar~indvar). This syntax (dependent variable, tilde, independent variable) should be feeling familiar by now.\nWrite a command to perform an ANOVA on length as a function of diet, and assign the result to a variable called dietaov.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry dietaov&lt;-aov(sampledata$length~sampledata$diet)\n\n\n\nTo see the output from the ANOVA, you can use the command summary(model), replacing the placeholder with your own model’s name.\nWrite a command to look at the output from your ANOVA.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry summary(dietaov)\n\n\n\nThe output is a table of numbers. The important line is the one labelled sampledata$diet. This reports the probability that the differences in length among the diets could be merely due to chance. The p-value is very small, .00011, so the effect of diet on length is highly statistically significant.\nHowever, recall that you are comparing 3 groups, and that the differences between diet groups 1 and 2 were larger than the differences between diet groups 2 and 3. Are ALL these differences statistically significant?\nNot necessarily. A significant p-value in an ANOVA only means that at least one of the groups is different from the rest, not that ALL the groups are different from one another.\n\n\n\nTukey’s test\nSo to probe the situation more deeply, we should follow up this significant ANOVA with a Tukey’s test. A Tukey’s test looks at all the pairwise comparisons of groups, and gives a separate p-value for each comparison.\nThe command to perform a Tukey’s test is TukeyHSD(model), HSD stands for ‘honestly significant difference.’\nWrite the command to perform a Tukey’s test on your model.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry TukeyHSD(dietaov)\n\n\n\nThe output is in the form of a table that compares each of the 3 groups to the others, with the p-value for that particular comparison as the final column.\nWe can see that diet group 1 differs significantly from group 2, and that group 1 differs from group 3, but that diet group 2 does NOT differ significantly from diet group 3.\n\n\nTwo-way ANOVA for multiple independent variables\nANOVA is a very versatile data analysis tool. For example, an ANOVA can be used to explore data from experiments that have more than one independent variable.\nIn our sampledata, there are two categorical variables, temp and diet. In the study that generated these data, individuals were reared under one of two different temperature regimes, and were raised on one of three different diets. We’d like to know how temp influenced body weight, how diet influenced body weight, and whether there was an interaction between the effects of temp and diet.\n\nVisualize data\nLet’s start, as always, by looking at a graph. In this case, we want to see a clustered boxplot that shows all 6 combinations of diet and temperature as separate bars.\nTo create a boxplot for a situation where there are two different independent variables, you can use this code: boxplot(depvar ~ indvar1*indvar2), replacing these placeholders with the appropriate file and variable names.\nWrite the code to create a boxplot of length, using temp for the first independent variable and diet for the second.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry boxplot(sampledata$length~sampledata$temp*sampledata$diet)\n\n\n\nNotice that on the x-axis, there are 3 diet groups (1,2,and 3); within each group, the data for the two temps (A and B) are shown side-by-side. If instead you wanted two temp groups, with the 3 diets shown side-by-side within them, you would reverse the order of the two independent variables in the boxplot command.\nTry it now. Write a boxplot command to create a length boxplot that has two temperature groups with the three diet types shown side-by-side.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nJust reverse the positions of temp and diet in the code you just wrote.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nboxplot(sampledata$length~sampledata$diet*sampledata$temp)\n\n\n\n\n\n\nTwo-way ANOVA\nWe can assess the effect of both temperature and diet on length with a two-way ANOVA. The two-way refers to having two different independent variables, temp and diet in this case.\nThe command for performing a two-way ANOVA is model&lt;-aov(data$depvar ~ data$cat1*data$cat2). cat1 and cat2 are placeholders that represent the 2 independent variables.\nWrite a command to perform a two-way ANOVA on the effect of temp and diet on length, and store the result in a variable named length2way. Put temp in front of the *, and diet behind.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry length2way&lt;-aov(sampledata$length~sampledata$temp*sampledata$diet)\n\n\n\nType a command to look at the output from your new two-way ANOVA.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntry summary(length2way)\n\n\n\nThe table of output gives the probability that the differences in length between the two temperatures could be due to chance alone, and the probability that the differences in length among the three diets could be due to chance alone. The interaction term assesses whether the effect of temperature depends on which diet type the organism received.\nIn this example, temperature did NOT have a significant effect on length (p=.205761), diet DID have a significant effect on length (p=.000124), and there was no interaction between temperature and diet (p=.154474)).\nIn other words, the effect of temperature was the same for all diets, and the effect of diet was the same for both temperatures."
  },
  {
    "objectID": "Bio110_lesson_seven.html#congratulations",
    "href": "Bio110_lesson_seven.html#congratulations",
    "title": "Lesson 7: Inferential stats",
    "section": "Congratulations!",
    "text": "Congratulations!\nNow you are familiar with some of the most basic and widely-used tests of statistical inference. To learn more about statistical inference in general, consider taking Math 255. To learn more about carrying out statistical analyses in R, there are many online resources that can be easily found by Googling your specific situation."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bio 110 Tutorials",
    "section": "",
    "text": "Welcome to the BIO 110 tutorial site! Here you can find tutorials for lessons in working with data."
  },
  {
    "objectID": "Bio110_lesson_six.html#introduction",
    "href": "Bio110_lesson_six.html#introduction",
    "title": "Lesson 6: Bar Graphs",
    "section": "Introduction",
    "text": "Introduction\nWelcome. In this lesson, you will learn how to create simple bar graphs and clustered bar graphs, and to add error bars to both types of graphs.\nYou will need two packages, ‘gplots’ and ‘plotrix,’ which this tutorial loads automatically. If you work outside of the tutorial, you will need to load these yourself."
  },
  {
    "objectID": "Bio110_lesson_six.html#dataset",
    "href": "Bio110_lesson_six.html#dataset",
    "title": "Lesson 6: Bar Graphs",
    "section": "Dataset",
    "text": "Dataset\nA dataset called bargraphdata has been included in this tutorial.\nType its name so that you can see what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry bargraphdata\n\n\n\nIt would also be good to understand the structure of the different variables. Type the command that allows you to see the structure of bargraphdata.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry str(bargraphdata)\n\n\n\nThis dataset contains three variables. The data come from an experimental field study that lasted three years and involved 40 study plots. Each plot received one of two different experimental treatments.\n\nThe first variable, var1, is a measurement that was made in each of the plots; this variable is numerical.\nThe second variable, treatment, refers to whether a particular study plot received treatment A or treatment B; this is a factor (category) variable.\nThe third variable, year, refers to the year in which the measurement was made."
  },
  {
    "objectID": "Bio110_lesson_six.html#bar-graphs",
    "href": "Bio110_lesson_six.html#bar-graphs",
    "title": "Lesson 6: Bar Graphs",
    "section": "Bar Graphs",
    "text": "Bar Graphs\nSuppose you want to make a bar graph that compares the means of var1 for each of the two treatments. For now, imagine that you do not care about the year the measurement was made.\n\nIdentify data\nThe first thing you need to do is to identify the data that will be used to make each bar. Right now all of the data values for both bars are part of the same variable, var1.\nYou will need to tell R which data values to use for each bar. The easiest way to do this is to subset var1 according to the value of treatment. You have done this in earlier lessons, using the tapply function; you’ll do something similar here.\nTo make a bar graph showing means and error bars for each level of treatment, A and B, we start by computing the means for the two levels. Recall that we can use tapply to do this, using the following syntax: tapply(datafilename$numeric_variable, datafilename$grouping_variable, mean). Instead of printing out the means, let’s save them in a new variable, called tmtmean, that we can use later.\nWrite a command that creates a new variable, tmtmean, that contains two means for var1: the mean for plots that received treatment A, and the mean for plots that received treatment B. Remember to substitute your data file and variable names for the placeholders shown above.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry tmtmean&lt;-tapply(bargraphdata$var1, bargraphdata$treatment,mean)\n\n\n\nThe command for making a bar graph is barplot2(list_of_means, beside=T). In this command,list_of_means is a placeholder for the variable name you used for the means variable you created. beside=T tells R to put the bars side-by-side rather than stacking them.\nWrite a command that will create a bar graph comparing the means of var1 for the two experimental treatments.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry barplot2(tmtmean, beside=T)\n\n\n\n\n\nAxis labels\nYou now have a nice basic bar graph, but the graph is missing axis labels. Think about how you added axis labels when you made a boxplot. You can do the same thing here, by specifying xlab='your label text' and ylab='your label text' after the other parts of the command.”\nWrite a line of code to modify the barplot2 command to include a label for the x-axis that reads ‘treatment’ and a label for the y-axis that reads ‘variable one’.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry barplot2(tmtmean, beside=T, xlab=\"treatment\", ylab=\"variable one\")\n\n\n\n\n\nAdding error bars\nIn lesson three, you learned about the importance of describing the variability in the data as well as its central tendency. This bar graph does not show the variability in var1. You can do that by adding error bars to the bars. The error bars can represent whatever measure of variability you choose: standard deviation, standard error, or 95% confidence limits.\n\nCompute measure of variability\nTo add error bars to your graph, you first need to compute the values for the measure of variability you have chosen to use. In this example, let’s use the standard deviation. We can use the same approach you took to calculating treatment means to calculate the standard deviations for the two treatment groups, A and B, and to put them into a new variable.\nUsing tapply, as you did before, write a command that creates a new variable, tmtsd, that contains the standard deviations of var1 for plots that received treatment A and for plots that received treatment B. Remember to substitute your data file and variable names for the placeholders shown above.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry tmtsd&lt;-tapply(bargraphdata$var1, bargraphdata$treatment,sd)\n\n\n\n\n\nAdd new variables as error bars\nNow you can use this new variable to make a bar graph with error bars above and below the means. The error bars will extend 1 standard error above the mean and 1 standard error below the mean. This involves putting more arguments into the parentheses.\n\nAdding the argument: plot.ci=T tells R that you are adding information about variability to your graph. (ci technically stands for confidence interval, but is used here to refer to any measure of variability that you specify. =T means ‘is true’)\nci.u refers to the location of the upper portion of the error bar. The argument ci.u=tmtmean+tmtsd says to make each error bar the height of one standard deviation above its respective mean.\nThe equivalent argument to specify the lower part of the error bar is: ci.l=tmtmean-tmtsd\n\nTo make a bar graph with error bars that are one standard deviation above and below the mean, you would add these two arguments within the parentheses, after the statements about the axis labels. Separate each argument from the others with a comma.\nWrite a command for a bar graph of the means of variable1 for each of the two treatments, A and B, with axis labels of ‘treatment’ and ‘variable one’. Include standard deviation bars.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry barplot2(tmtmean, beside=T, xlab=\"treatment\", ylab=\"variable one\", plot.ci=T, ci.u=tmtmean+tmtsd, ci.l=tmtmean-tmtsd)\n\n\n\nIf you would rather show standard error bars and you have loaded plotrix, you can substitute std.error for sd and get a bargraph with standard error bars. You would first need to create a new variable with the standard error values for the two treatment groups, and then use that variable in your ci.u and ci.l expressions."
  },
  {
    "objectID": "Bio110_lesson_six.html#clustered-bar-graph",
    "href": "Bio110_lesson_six.html#clustered-bar-graph",
    "title": "Lesson 6: Bar Graphs",
    "section": "Clustered bar graph",
    "text": "Clustered bar graph\nSuppose you were interested in a bar graph that not only compared the treatments, but also displayed if and how the years differed from each other. You can do this with what is called a clustered bar graph.\nIn this case, a clustered bar graph would have six different bars, one for each combination of treatment (A and B) and year (1, 2, and 3).\n\nTypes of clusters\nThere are two ways of ‘clustering’ these six bars, depending on what comparison you were most interested in.\n\nYou could have two clusters, one for each treatment, and put the three years next to each other within each of the treatment clusters. This would be the best arrangement if you were particularly interested in comparing the years to each other.\nThe alternative would be to have three clusters, one for each year, and to put the two treatments next to each other within each of the year clusters. This would be the best arrangement if you were particularly interested in comparing the treatments to each other.\n\n\n\nSpecifying data and variables\nTo make either of these clustered bar graphs, you would go back to working with the original data file, bargraphdata, where the data are arranged in rows and columns.\nYou would start by making a table of the means of var1 for each of the 6 subgroups using tapply. You used tapply earlier in this lesson to make a simple bar graph. This time, instead of subdividing the values of var1 by just a single grouping variable, treatment, you wish to subdivide var1 by all combinations of two different grouping variables, treatment and year.\nThis requires a slightly different syntax for the tapply command: tmt_yr_means&lt;-tapply(bargraphdata$var1, list(bargraphdata$treatment, bargraphdata$year), mean). Notice that the two grouping variables are bundled together in parentheses following the word ‘list.’\nTry it yourself now.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry tmt_yr_means &lt;- tapply(bargraphdata$var1, list(bargraphdata$treatment, bargraphdata$year), mean)\n\n\n\nWrite a command to see what the tmt_yr_means variable looks like.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry tmt_yr_means\n\n\n\nThe variable that you have created is a table that has two rows, one for each treatment, and three columns, one for each year.\n\n\nAdding standard deviation bars\nIf you want your bar graph to include standard deviation bars, you need a similar table of the standard deviations.\nWrite the equivalent command to create such a table, and call it tmt_yr_errors.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the same command as previously, substituting ‘sd’ for ‘mean’\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ntmt_yr_errors&lt;-tapply(bargraphdata$var1,list(bargraphdata$treatment,bargraphdata$year),sd)\n\n\n\n\n\n\nCreating the clustered bar graph\nThe command for the clustered bar graph is similar to the one for a simple graph, but uses the new tables of means and errors that you have created.\nThe command is: barplot2(tmt_yr_means, beside=T, plot.ci=T, ci.u=tmt_yr_means+tmt_yr_errors, ci.l=tmt_yr_means-tmt_yr_errors).\nTry writing this command and running it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry barplot2(tmt_yr_means, beside=T, plot.ci=T, ci.u=tmt_yr_means+tmt_yr_errors, ci.l=tmt_yr_means-tmt_yr_errors)\n\n\n\nNotice that this is the second kind of clustered bar graph, which shows a cluster that compares the two treatments within each year.\n\n\nChanging the layout of clusters by transposing\nIf you are more interested in creating two clusters, one for each treatment, you can do that by transposing the tables of mean and sd values. Transposing a table means that the rows become the columns and the columns become the rows. The transpose command is t().\nWhen two tables having the same dimensions are added or subtracted, the result is another table of the same dimensions, with each element having been added to or subtracted from the corresponding element. This means that you do not need to transpose the ‘errors’ table separately; you can use t(means+errors) and t(means-errors) to revise this command.\nWrite a new command using the t() function to create a graph with two treatment clusters of three years each.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDid you remember to transpose the means table as well as the others?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nbarplot2(t(tmt_yr_means), beside=T, plot.ci=T, ci.u=t(tmt_yr_means+tmt_yr_errors), ci.l=t(tmt_yr_means-tmt_yr_errors))\n\n\n\n\n\n\nLegend\nWith a clustered barplot, it is important to include a legend so that the reader can interpret the graph; axis labels are not enough.\nThe legend command creates a legend for a graph that already exists. This command should be written and run after you have produced the graph you want; it will be added to that graph. The command: legend(\"topleft\",legend=c(\"Year 1\",\"Year 2\",\"Year 3\"), fill=c(\"red\",\"orange\",\"yellow\")) will place a legend in the top left-hand corner of the graph.\nTry it yourself now.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nFirst create your plot again with the command from the previous code chunk. Then add the command to create legends.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nbarplot2(t(tmt_yr_means), beside=T, plot.ci=T, ci.u=t(tmt_yr_means+tmt_yr_errors), ci.l=t(tmt_yr_means-tmt_yr_errors))\n\nlegend(\"topleft\",legend=c(\"Year 1\",\"Year 2\",\"Year 3\"), fill=c(\"red\",\"orange\",\"yellow\"))"
  },
  {
    "objectID": "Bio110_lesson_six.html#congratulations",
    "href": "Bio110_lesson_six.html#congratulations",
    "title": "Lesson 6: Bar Graphs",
    "section": "Congratulations",
    "text": "Congratulations\nThat’s it! Now you know how to use bar graphs to display your data. Remember that if the distribution of data values is highly non-normal, boxplots are a more appropriate form of graphical display than bar graphs."
  },
  {
    "objectID": "Bio110_lesson_four.html#introduction",
    "href": "Bio110_lesson_four.html#introduction",
    "title": "Lesson 4: Box Plots",
    "section": "Introduction",
    "text": "Introduction\nWelcome to lesson four, where you will learn the basics of graphing using boxplots. Boxplots are an excellent graphing option for many datasets, because they are valid regardless of whether or not the data are normally distributed. But they take a little getting used to, because they are not as commonly seen as bar graphs are.\nWe will work with the physiology dataset, called data, that you have already seen.\nType the word data to recall what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Bio110_lesson_four.html#plotting-data",
    "href": "Bio110_lesson_four.html#plotting-data",
    "title": "Lesson 4: Box Plots",
    "section": "Plotting Data",
    "text": "Plotting Data\nR has a function called plot, which makes a simple graph showing the relationship between an independent and a dependent variable.\n\nWhen the independent variable is continuous, the plot command creates a scatterplot.\nWhen the independent variable is categorical, the plot command creates a boxplot.\n\nWhen data are in the form of numbers, R can treat them either as continuous (numeric variables, in R language) or as categorical (factor variables, in R language).\nIn data the different measurements are categorized as having been made under either exercise (1) or resting (2) conditions.\nSuppose you wanted to create a graph that compared the respiratory quotients (RQ) under these two conditions.\nThe basic plot function has this form: plot(yourdata$xvariable, yourdata$yvariable). You would need to substitute the actual names for the dataset and variables used as place-holders here.\nUse the plot function to graph the RQs of the two groups, exercise and resting.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that variable names are case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ)\n\n\n\n\nNotice that R has created a scatterplot, and that it is treating the Condition variable as continuous. Many of the dots representing the data values overlap with each other. For this reason, it is hard to see whether the central tendencies of the two conditions differ. A boxplot is a better choice for these data.\n\nBoxplot\nIf the Condition variable were a factor variable, R would make a boxplot instead. We can tell R to treat this variable as a factor by writing: data$Condition&lt;-as.factor(data$Condition).\nTry it for yourself. Make Condition a factor variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDid you spell everything correctly?\n\n\n\nNow run the plot command again.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition,data$RQ)\n\n\n\n\nWhen R understands that the Condition variable is a factor or category, the ‘plot’ command creates a boxplot. The horizontal bars represent the medians of each group. The boxes represent the interquartile range, i.e. the middle 50% of all the data values.\n\nIn which condition is the median respiratory quotient higher, exercise or resting?\n\n\n\n\n ✗resting\n\n\n ✓exercise\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that 1 represents the exercise condition and 2 represents the resting condition.\n\n\n\n\n\nModifying a plot\nThis boxplot is not very easy to read because the labels are not very clear. We can change the plotting parameters to improve its appearance. There are many ways to modify the plot command to add additional features. We’ll cover some of the most basic modifications in this tutorial.\n\nAxis labels\nThe axis labels should be self-explanatory. We can create axis labels by adding the xlab='_____' and ylab='____' arguments to the plot command. Because these labels are character strings (i.e. lists of letters), we need to enclose them in quotation marks.\nYou can add these terms to the plot command, within the parentheses. For example, you might write: plot(data$x, data$y, xlab='my x-axis label', ylab='my y-axis label').\nTry it yourself, with “Condition” as the x-axis label, and “RQ” as the y-axis label. Don’t forget to put the text of these labels in quotation marks, and to use a comma to separate them.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that text is case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, xlab=\"Condition\", ylab=\"RQ\")\n\n\n\n\nBut the labels are still not completely clear. It would be much clearer to replace the 1 and 2 with the labels ‘exercise’ and ‘resting.’ You can do this by adding the names=c('category name1', 'category name2', etc.) argument to the plot command.\nTry it now, using “exercise” for the first category name, and “resting” for the second one. Put the names command in front of the arguments for the axis labels, and separate them with a comma.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nIn this tutorial, R is looking for you to enter the arguments in a particular order. Try putting the names argument in front of the axis label argument – this might be why you got an error message despite seeing the correct graph.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, names=c(\"exercise\",\"resting\"), xlab=\"Condition\",ylab=\"RQ\")\n\n\n\n\n\n\nAdjusting the range of values\nYou might also want to use a wider range of values on the y-axis so that the figure has a little more elbow room. For example, the current y-axis starts at an RQ value of 0.85 and ends at a value of 1.0. Maybe you’d like it to range from 0.75 to 1.05 instead.\nYou can do this by inserting the ylim=c(lowerlimit, upperlimit) argument into the plot command like this: plot(data$x, data$y, ylim=c(0.75, 1.05)).\nTry it now, inserting the ylim specification after the commands for category names, axis labels, etc.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember to put all text expressions in quotes. And R wants you to use the same case, upper or lower, as the instructions specify.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, names=c(\"exercise\",\"resting\"), xlab=\"Condition\", ylab=\"RQ\", ylim=c(0.75,1.05))"
  },
  {
    "objectID": "Bio110_lesson_four.html#congratulations",
    "href": "Bio110_lesson_four.html#congratulations",
    "title": "Lesson 4: Box Plots",
    "section": "Congratulations!",
    "text": "Congratulations!\nHooray! You have completed lesson four. You have learned how to make and interpret a boxplot and how to modify the axis labels and the x- and y-limits. Lesson five will teach you how to make a scatterplot."
  },
  {
    "objectID": "Bio110_lesson_two.html#introduction",
    "href": "Bio110_lesson_two.html#introduction",
    "title": "Lesson 2: Central Tendency",
    "section": "Introduction",
    "text": "Introduction\nWelcome. In this lesson, you will learn about central tendency."
  },
  {
    "objectID": "Bio110_lesson_two.html#analyzing-central-tendency",
    "href": "Bio110_lesson_two.html#analyzing-central-tendency",
    "title": "Lesson 2: Central Tendency",
    "section": "Analyzing Central Tendency",
    "text": "Analyzing Central Tendency\nWhen analyzing a set of data values, it is often important to summarize where the numerical ‘center’ of the data values lies.”\nStart by creating a variable called “mydata” that contains the values 4, 4, 2, 6, 3, 0, and 3\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDid you remember to use the assignment arrow and the concatenate operator? Did you copy the values correctly?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmydata&lt;-c(4, 4, 2, 6, 3, 0, 3)\n\n\n\n\n\nCalculating Mean and Median\nThe mean (also known as the average) is a commonly-used measure of the center of a set of values. To compute the mean, you can use the command mean(dataname), substituting the name of your variable for the placeholder shown here.\nTry it now with your mydata variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nPut the name of your variable in the parentheses.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmean(mydata)\n\n\n\n\nFor some data sets, the mean is not a very good measure of the data’s central tendency. For example, what if your data values were 2, 2, 2, 3, 1, 3, 12?\nTo analyze this data, create a new variable, data_two, containing these values.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDon’t forget to use the assignment arrow and the concatenate function.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata_two&lt;-c(2, 2, 2, 3, 1, 3, 12)\n\n\n\n\nNext, compute the mean of data_two.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nPut the mean of your variable in parentheses.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmean(data_two)\n\n\n\n\nNotice that all but one of the data values are lower than the mean, because there is one really high value. For data like these, the median is a better measure of central tendency. The median is the middle value when the data are ordered from lowest to highest.\nThe function median() computes the median for a variable.\nCompute the median of data_two.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmedian(data_two)\n\n\n\n\nNotice that the median is not unduly influenced by the single large data value, and so is a more accurate measure of the center of the data values.\nNext, write an expression for the difference between the mean and the median of data_two. R uses the symbols + for addition, - for subtraction, * for multiplication, and / for division. Subtract the smaller value from the larger value.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nSeparate these two quantities with a minus sign.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmean(data_two)-median(data_two)\n\n\n\n\nYou may be wondering how to know whether to use the mean or the median. This can be especially challenging if you have a variable with many data values.\n\n\nHistograms\nYou can examine the distribution of the data values visually using a histogram. A histogram shows how many data values fall into different size categories.\nThe function hist() creates a histogram for a variable.\nCreate a histogram for the original data variable, called mydata.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nhist(mydata)\n\n\n\n\nYou should see a histogram pop up under the code block. On the x-axis are intervals (bins) representing the different possible data values. On the y-axis are the frequencies with which different data values are present in the data set (once, twice, etc.).\nNow create a second histogram for data_two.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see from the histogram that the mean of data_two does not describe these data very well. When a histogram’s peak is not near the center, and/or its two tails are quite asymetrical, it’s best to use the median, not the mean, to summarize the central tendency.\nThat’s the end of this lesson on central tendency. Another important kind of descriptive statistic is variability; that’s the topic of lesson three."
  },
  {
    "objectID": "Bio110_lesson_three.html#introduction",
    "href": "Bio110_lesson_three.html#introduction",
    "title": "Lesson 3: Variability",
    "section": "Introduction",
    "text": "Introduction\nWelcome! In this lesson you will learn about measures of variability. But first, notice in the code chunk above that R has just told you that it has downloaded certain packages. An R package is a group of functions that perform special operations. R has loaded these packages to permit you to use these functions in this tutorial. When you start working on your own data outside of these tutorials, you will sometimes need to tell R to load certain packages. We’ll walk you through this step when it is needed."
  },
  {
    "objectID": "Bio110_lesson_three.html#variation-around-a-central-tendency",
    "href": "Bio110_lesson_three.html#variation-around-a-central-tendency",
    "title": "Lesson 3: Variability",
    "section": "Variation Around a Central Tendency",
    "text": "Variation Around a Central Tendency\nYou have already learned that one important way to summarize a set of data values is with a measure of central tendency, the mean or the median.\nAnother important summary statistic is the amount of variation around that central tendency.\n\nDataset\nThis lesson contains a dataset that you will work with, named data. You have already worked with these data, in lesson one.\nType the word data to recall what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDid you spell data correctly? No quotation marks are needed.\n\n\n\nThe dataset contains physiological data for a sample of individuals.\n\nHow many different individuals are in the sample?\n\n\n\n\n ✗9\n\n\n ✓14\n\n\n ✗18\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nEach individual has a unique number.\n\n\n\n\n\nCompute central tendency values for specific groups\nThe Condition variable specifies whether the measurements were made under exercise (1) or resting (2) conditions.\nSuppose we want to compute the mean and the variability of RQ (respiratory quotient) for the individuals in our sample, but we want separate values for the exercise and resting conditions.\nWe can do this with the tapply() function, which allows us to compute the value of some function, such as the mean, for a numeric variable that has been subdivided into groups according to the values of another, category variable, such as Condition.\nThe syntax for this command is: tapply(datafilename$numeric_variable, datafilename$grouping_variable, function_name).\nFind the mean RQ for the two conditions, exercise and at rest. Be sure to substitute the actual names of your variables and function for the placeholders shown in the sample command above.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe grouping variable is data$Condition. Remember that R is case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ntapply(data$RQ,data$Condition,mean)\n\n\n\n\n\n\n\n\n\n\nCheck your work\n\n\n\n\n\n\nWhat is the mean of the RQ column?\n\n\n\n\n ✗0.45\n\n\n ✗0.99\n\n\n ✓0.876\n\n\n\n\n\n\n\n\n\n\nVariance\nOne common measure of variability is the variance. The variance is the square of the average difference between each data value and the mean.\nYou can compute the variance of a variable with the var() function.\nUse var() to compute the variance of the RQ for the two conditions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the tapply() function.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ntapply(data$RQ,data$Condition,var)\n\n\n\n\n\n\n\n\n\n\nCheck your work\n\n\n\n\n\n\nWhat is the variance of the Condition column?\n\n\n\n\n ✗1.80123\n\n\n ✓0.001757\n\n\n ✗0.001995\n\n\n\n\n\n\n\n\nAnother common measure of variance is the standard deviation, which is simply the square root of the variance. The function for standard deviation is sd().\nCompute the standard deviation of RQ for each of the two conditions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDid you remember that R is case-sensitive?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ntapply(data$RQ,data$Condition,sd)\n\n\n\n\n\n\n\n\n\n\nCheck your work\n\n\n\n\n\n\nWhat is the standard deviation of the Condition column?\n\n\n\n\n ✓0.0419\n\n\n ✗0.0447\n\n\n ✗0.0223\n\n\n\n\n\n\n\n\n\n\nStandard error and confidence intervals\nOne reason to compute the variability in a data set is to get an idea of how accurately our sample has estimated the mean of a population. Two additional measures of variability, standard error and confidence intervals, do this more usefully than variance or standard deviation.\nThis is because both standard error and confidence intervals become smaller as the sample size, or number of data values, gets larger – which reflects our increased certainty that our sample mean represents the true population mean.\nTo compute the standard error of a set of data in R, a package called plotrix is required. In this tutorial, plotrix has already been installed for you.\nThe function for computing the standard error is std.error().\nCompute the standard error of RQ for each of the two conditions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the same syntax as you did for computing standard deviation.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ntapply(data$RQ,data$Condition,std.error)\n\n\n\n\n\n\n\n\n\n\nCheck your work\n\n\n\n\n\n\nWhat is the standard error of the RQ column?\n\n\n\n\n ✓0.0169\n\n\n ✗0.1238\n\n\n ✗0.0447\n\n\n\n\n\n\n\n\n\n\nConfidence Intervals\nConfidence intervals are closely related to standard error. The 95% confidence interval is a range of data values that encloses the sample mean. There is a 95% probability that the “true” mean lies within the 95% confidence interval of the sample mean.\nThe easiest way to compute a 95% confidence interval is to use the t.test() function.\nThe command for the t-test is t.test(dataname$variablename), using the actual datafile and variable names instead of the placeholders shown here.\nLet’s compute the confidence interval of the variable RQ measured during exercise. To do this, we need a way to extract a subset of the RQ data – just the RQ values measured under Condition 1.\nIn R, we do this by ‘indexing’ the value of one variable (RQ) by the value of a second variable (Condition). In this case, we wish to extract the values of RQ for those observations (rows) where Condition is exactly equal to 1(==1, in r-speak). The syntax is: data$RQ[data$Condition==1].\nNow write the command to perform a t-test on the subset of RQ values measured under Condition 1, exercise.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nt.test(data$RQ[data$Condition==1])\n\n\n\n\nIn the output, you should see the name of the variable you created, followed by two lines of information that are not relevant if you are only interested in knowing the 95% confidence interval. The 95% confidence interval is on the following line, followed by a computation of the sample mean.\nSo for these data, the (rounded) sample mean is 0.876, and the 95% confidence interval ranges from a minimum value of 0.834 to a maximum of 0.917.\n\n\nCongratulations!\nYou’ve completed lesson three, in which you learned how to compute several measures of variability (variance, standard deviation, standard error, and confidence intervals). You also learned two ways to subset a data set: using tapply() and indexing. In lesson four you will learn how to make a box plot, which is a basic way of graphically displaying the central tendency and the variability of any data set."
  },
  {
    "objectID": "Bio110_lesson_one.html#introduction",
    "href": "Bio110_lesson_one.html#introduction",
    "title": "Lesson 1: Basic Operations",
    "section": "Introduction",
    "text": "Introduction\nWelcome to this introduction to R. You will learn how to enter data and to perform some basic operations.\nR is a program for dealing with data. In Biology courses, most of the time your data will be in the form of a table with columns and rows.\nLater on, you will learn how to import your own data table into R in order to work with it. For now, we will work with a very simple set of data: data for a single variable."
  },
  {
    "objectID": "Bio110_lesson_one.html#working-with-data",
    "href": "Bio110_lesson_one.html#working-with-data",
    "title": "Lesson 1: Basic Operations",
    "section": "Working with data",
    "text": "Working with data\nFor example, suppose you have measured the diameters of a sample of 8 bacterial colonies. The data values (in mm) are: 4, 3.5, 6.1, 2.2, 4.7, 3, 5.2, and 4.6.\n\nAssigning values to a variable name\nIn R, you ‘assign’ these values to a variable name using an ‘arrow’ formed by the ‘less than’ symbol and the dash, like this: &lt;-.\nOn the left side of the arrow, put the name of the variable you wish to create. The name should be short, descriptive, and must not contain any spaces. On the right of the arrow, type your data values, separated by commas. The data values should be enclosed in parentheses, and preceded by the letter c, which stands for ‘concatenate’ or ‘combine’ all the values into a single vector of values.\nThis command creates a variable called ‘diam’ that contains our example data values: diam&lt;-c(4,3.5,6.1,2.2,4.7,3,5.2,4.6)\nNow you should try creating the diam variable using these same data. In the code chunk below, type in a command to create diam.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDon’t forget the parentheses.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndiam&lt;- c(4,3.5,6.1,2.2,4.7,3,5.2,4.6)\n\n\n\n\nIf you are interested in knowing what a variable contains, you can just type its name. R is case-sensitive, so be careful about whether you type in upper or lower case.\nTry typing diam and see what you get.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nJust type the word diam.\n\n\n\n\n\nUsing data tables\nIn an R data table, each column represents a different variable. Each observational unit is represented by a separate row in the table. The first row of the table is used for the names of the different variables. In R, variable names must not contain any spaces.\nA table with this format has been created for you and imported into this tutorial. It has been given the creative name of data.\nType a command that will show you a display of the data table called “data”.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTo see an object in R, type its name. No quotes are required.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata\n\n\n\n\nYou can see that this data table contains 4 variables and 15 rows. (Also, each row is numbered sequentially; these numbers are not considered a variable.)\nThese data are from a physiological study. Each individual’s respiratory quotient (RQ) was measured, either after exercise (1), or during rest (2). Their heart rates in beats per minute were also measured. NA stands for ‘not available,’ meaning that the data for these combinations of individual and variable were lost or not recorded.\n\nSpecifying Variables\nYou might wish to see just one of the variables in this data file. The way to specify an individual variable is to use the name of the data file, followed by the dollar sign, $, followed by the name of the variable – with no spaces.\nWhat would you type to see a list of the heart_rate data values in this file?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata$heart_rate\n\n\n\n\n\n\n\nData Structure\nIn R, each variable is encoded as either numeric (a number), integer (a whole number), a factor (a category, expressed either as a word or a number), or character (a string of letters). There are other less common variable properties as well. A variable’s property is important because some operations can only be carried out on variables with certain properties.\nA data file’s ‘structure’ refers to the properties of its variables. To find out the properties of all the variables in a data set, you would use the command str(dataname), using the name of your data file in place of the placeholder here.\nWrite a command that will allow you to see the structure of ‘data.’\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nstr(data)\n\n\n\n\n\nChanging a variable’s property\nYou can see that the variable data$Condition is currently encoded as an integer. But it is actually a category variable. You can change this variable’s property with the assignment arrow, in the following way: data$Condition &lt;-as.factor(data$Condition).\nTry changing the variable named Individual to a factor variable. You will notice that a little prompt box shows up. You can save yourself some typing by choosing the rest of the expression from among the choices in the prompt box.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember to use the dollar sign notation, and that R is case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata$Individual&lt;-as.factor(data$Individual)\n\n\n\n\nCongratulations! You have finished the first R tutorial. You have learned how to create a variable in R, how data files in R are organized, and how to examine and change the properties of different variables."
  }
]