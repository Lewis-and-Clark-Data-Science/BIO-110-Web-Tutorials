[
  {
    "objectID": "Bio110_lesson_five.html#introduction",
    "href": "Bio110_lesson_five.html#introduction",
    "title": "Lesson 5: Scatterplots",
    "section": "Introduction",
    "text": "Introduction\nWelcome to lesson five, where you will learn the basics of graphing using scatterplots.\nWe will work with the physiology dataset, called data, that you have already seen.\nType the word data to recall what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Bio110_lesson_five.html#scatterplots",
    "href": "Bio110_lesson_five.html#scatterplots",
    "title": "Lesson 5: Scatterplots",
    "section": "Scatterplots",
    "text": "Scatterplots\nSuppose we wanted to look at a scatterplot of the relationship between heart rate and respiratory quotient (RQ).\nWhen you examine the data table, you can see that there are some rows that are missing data for heart rate. In R, missing data are indicated by the letters ‘NA’. R will ignore these missing values when making a graph. One you collect your own data, this is the way to enter any missing data into your data table.\nAs you have learned, R has a function called plot that graphs the relationship between an independent and a dependent variable. When the independent variable is a factor variable, plot creates a box plot, as you saw in lesson four. When the independent variable is continuous (numeric), plot creates a scatterplot, as you will see in this lesson.\nThe basic plot function has this form: plot(yourdata$xvariable, yourdata$yvariable). You would need to substitute the actual names for your dataset and variables used as place-holders here.\nUse the plot command to plot the relationship between heart rate (on the x-axis) and RQ (on the y-axis). Be sure to use heart rate’s proper variable name.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nCopy the column names exactly to have the proper variable name.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$heart_rate,data$RQ)\n\n\n\n\n\nAdjust plot style\nNow that we have a basic graph, let’s learn how to adjust some of the plotting parameters to change things like color, text size, axis labels, axis limits, and point style.\nAll of the plotting parameters that can be adjusted can be found on the par help page. You cna find help for functions by typing a question mark followed by a function name into a code chunk. Type ?par to view this page and read through the graphical parameters.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nMany of the par functions can be used as arguments in the plot function. Simply place them after the x and y arguments and separate them with commas. For example, plot(data$heart_rate,data$RQ,col='red') would generate our original plot, but with red points.\n\nPoint Color\nTry generating the original plot with blue points. Be sure to put quotes around the color name.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\ntype col=“blue” following the y argument.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$heart_rate,data$RQ,col='blue')\n\n\n\n\nR can generate figures with virtually any color. Check out this linked pdf to see the colors that can be specified by name.\n\n\nType of point\nWe can also use graphical parameters to adjust the type of point that is plotted on our graph. We use the pch= argument for this.\nGenerate the original plot with blue points and pch=16. This will plot closed circles.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTry plot(data$heart_rate,data$RQ,col='blue',pch=16)\n\n\n\nType the command to look at the help page for pch to see all of the possible symbols and their associated codes.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nType ?pch.\n\n\n\n\n\nPoint Size\nOur points are looking a little small. Let’s make them larger with the cex= argument, which expands the character by a factor you can specify. As a default, they are set to cex=1.\nRe-generate the original figure with blue, closed points and cex=1.5, i.e. points that are 1.5 times as large as before.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$heart_rate,data$RQ,col=\"blue\",pch=16,cex=1.5)\n\n\n\n\n\n\n\nAxis labels\nOur axis labels aren’t particularly clear or useful as is. Let’s change them using the xlab='' and ylab='' arguments. Because the labels are character strings, we need to enclose them in quotes.\nRe-generate the original figure with “Heart Rate” as the x-axis label and “RQ” as the y-axis label and all of the other updated graphical parameters. Specify the x-axis label before the y-axis label.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$heart_rate,data$RQ,col='blue',pch=16,cex=1.5,xlab='Heart Rate',ylab='RQ')\n\n\n\n\nNow you’ve learned the basics of creating a scatterplot when both the x and y variables are continuous. You know how to alter many aspects of your figure’s appearance to make it clearer.\n\n\nScatterplots with a categorical variable\nNext, we’ll look at making scatterplots when the independent (x) variable is categorical. When data are in the form of numbers, R can treat them either as continuous (numeric variables, in R language) or as categorical (factor variables, in R language).\nIn data the different measurements are categorized as having been made under either exercise (1) or resting (2) conditions.”\nSuppose you wanted to create a graph that compared the respiratory quotients (RQ) under these two conditions. To make sure that R will create a scatterplot from these data, rather than a boxplot, we need to make sure that it considers the Condition variable to be numeric. We can do that with this command: data$variable&lt;-as.numeric(data$variable).\nMake sure that data$Condition is a numeric variable. Be sure to substitute the actual variable name for the placeholder.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata$Condition&lt;-as.numeric(data$Condition)\n\n\n\n\nUse the plot function to graph the RQs of the two groups, exercise and resting.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that variable names are case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ)\n\n\n\n\nNotice that a scatterplot (rather than a boxplot) is only a good option for a categorical x-variable if there are only a few data values, as in this example.\n\nAxis labels on categorical scatterplot\nHowever, this scatterplot is not very easy to read. For one, the axis labels are not very clear. We can change the plotting parameters to improve the appearance of the figure.\nThe axis labels should be self-explanatory. We can change them by adding the xlab='___' and ylab='____' arguments to the plot command. Because these labels are character strings (i.e. lists of letters), we need to enclose them in quotation marks.\nYou can do this by adding axis label arguments to the plot command, within the parentheses, as you did when making box plots. For example, you might write: plot(data$x, data$y, xlab='my x-axis label', ylab='my y-axis label').\nTry it yourself, with ‘Condition’ as the x-axis label, and ‘RQ’ as the y-axis label.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that text is case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, xlab=\"Condition\", ylab=\"RQ\")\n\n\n\n\nThis is better, but still not clear enough. The values ‘1’ and ‘2’ represent the two categories, but values like 1.4 do not make sense. And the two groups of points should be centered on the x-axis.\n\n\nAxis limits\nTo center the points better, we can increase the limits of the x-axis, e.g. so that they range from 0.5 to 2.5.\nYou can do this by inserting xlim=c(0.5, 2.5) into the plot command: plot(data$x, data$y, xlim=c(0.5,2.5)).\nTry it now, adding new xlimits to the plot you have already created with axis labels.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember to put all text expressions in quotes.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, xlab=\"Condition\", ylab=\"RQ\", xlim=c(0.5,2.5))\n\n\n\n\n\n\nAdjust numeric labels\nWe also want to replace the existing numeric labels with the words ‘exercise’ and ‘resting’, centered under each cluster of points.\nTo do this, we first suppress the xaxis numbers, using the argument xaxt='n' in the plot command’s parentheses. This command means that the x axis text should be ‘null’, i.e. missing.”\nModify the plot command to suppress the x-axis text.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, xlab=\"Condition\", ylab=\"RQ\",xlim=c(0.5,2.5), xaxt='n')\n\n\n\n\nNow you have created a plot that has no numerical labels on the x-axis. We can now use the axis command to specify what our new x-axis should look like. This is a separate command that you execute after you have made your graph.\nThe syntax of this command is: axis(side, at=1:2,labels=c('category1name', 'category2name', etc.)). side indicates which axis of the graph to modify; at shows where along the x-axis the labels should be placed. Even though you have removed the old labels 1 and 2, R still knows where these positions are, and you can use them to place your labels under the clusters of points.\nAdd a new x-axis to your plot that labels the former ‘1’ category as ‘exercise’ and the former ‘2’ category as ‘resting’. For side, use a 1, which represents the bottom axis of the figure. First, you will need to recreate your plot and then execute this new command to create the labels.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nFirst, you’ll need to make your plot again by using the command from the previous code chunk.\nThen, on a new line, execute the axis() command to create labels on each cluster of points.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, xlab=\"Condition\", ylab=\"RQ\",xlim=c(0.5,2.5), xaxt='n')\n\naxis(1,at=1:2, labels=c(\"exercise\",\"resting\"))"
  },
  {
    "objectID": "Bio110_lesson_five.html#congratulations",
    "href": "Bio110_lesson_five.html#congratulations",
    "title": "Lesson 5: Scatterplots",
    "section": "Congratulations",
    "text": "Congratulations\nThat’s it! Now you’re an expert in making scatterplots. In lesson six, you’ll learn how to make two kinds of bar graphs."
  },
  {
    "objectID": "Bio110_lesson_three.html#introduction",
    "href": "Bio110_lesson_three.html#introduction",
    "title": "Lesson 3: Variability",
    "section": "Introduction",
    "text": "Introduction\nWelcome! In this lesson you will learn about measures of variability. But first, notice in the code chunk above that R has just told you that it has downloaded certain packages. An R package is a group of functions that perform special operations. R has loaded these packages to permit you to use these functions in this tutorial. When you start working on your own data outside of these tutorials, you will sometimes need to tell R to load certain packages. We’ll walk you through this step when it is needed."
  },
  {
    "objectID": "Bio110_lesson_three.html#variation-around-a-central-tendency",
    "href": "Bio110_lesson_three.html#variation-around-a-central-tendency",
    "title": "Lesson 3: Variability",
    "section": "Variation Around a Central Tendency",
    "text": "Variation Around a Central Tendency\nYou have already learned that one important way to summarize a set of data values is with a measure of central tendency, the mean or the median.\nAnother important summary statistic is the amount of variation around that central tendency.\n\nDataset\nThis lesson contains a dataset that you will work with, named data. You have already worked with these data, in lesson one.\nType the word data to recall what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDid you spell data correctly? No quotation marks are needed.\n\n\n\nThe dataset contains physiological data for a sample of individuals.\n\nHow many different individuals are in the sample?\n\n\n\n\n ✗9\n\n\n ✓14\n\n\n ✗18\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nEach individual has a unique number.\n\n\n\n\n\nCompute central tendency values for specific groups\nThe Condition variable specifies whether the measurements were made under exercise (1) or resting (2) conditions.\nSuppose we want to compute the mean and the variability of RQ (respiratory quotient) for the individuals in our sample, but we want separate values for the exercise and resting conditions.\nWe can do this with the tapply() function, which allows us to compute the value of some function, such as the mean, for a numeric variable that has been subdivided into groups according to the values of another, category variable, such as Condition.\nThe syntax for this command is: tapply(datafilename$numeric_variable, datafilename$grouping_variable, function_name).\nFind the mean RQ for the two conditions, exercise and at rest. Be sure to substitute the actual names of your variables and function for the placeholders shown in the sample command above.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe grouping variable is data$Condition. Remember that R is case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ntapply(data$RQ,data$Condition,mean)\n\n\n\n\n\n\n\n\n\n\nCheck your work\n\n\n\n\n\n\nWhat is the mean of the RQ column?\n\n\n\n\n ✗0.45\n\n\n ✗0.99\n\n\n ✓0.876\n\n\n\n\n\n\n\n\n\n\nVariance\nOne common measure of variability is the variance. The variance is the square of the average difference between each data value and the mean.\nYou can compute the variance of a variable with the var() function.\nUse var() to compute the variance of the RQ for the two conditions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the tapply() function.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ntapply(data$RQ,data$Condition,var)\n\n\n\n\n\n\n\n\n\n\nCheck your work\n\n\n\n\n\n\nWhat is the variance of the Condition column?\n\n\n\n\n ✗1.80123\n\n\n ✓0.001757\n\n\n ✗0.001995\n\n\n\n\n\n\n\n\nAnother common measure of variance is the standard deviation, which is simply the square root of the variance. The function for standard deviation is sd().\nCompute the standard deviation of RQ for each of the two conditions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDid you remember that R is case-sensitive?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ntapply(data$RQ,data$Condition,sd)\n\n\n\n\n\n\n\n\n\n\nCheck your work\n\n\n\n\n\n\nWhat is the standard deviation of the Condition column?\n\n\n\n\n ✓0.0419\n\n\n ✗0.0447\n\n\n ✗0.0223\n\n\n\n\n\n\n\n\n\n\nStandard error and confidence intervals\nOne reason to compute the variability in a data set is to get an idea of how accurately our sample has estimated the mean of a population. Two additional measures of variability, standard error and confidence intervals, do this more usefully than variance or standard deviation.\nThis is because both standard error and confidence intervals become smaller as the sample size, or number of data values, gets larger – which reflects our increased certainty that our sample mean represents the true population mean.\nTo compute the standard error of a set of data in R, a package called plotrix is required. In this tutorial, plotrix has already been installed for you.\nThe function for computing the standard error is std.error().\nCompute the standard error of RQ for each of the two conditions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the same syntax as you did for computing standard deviation.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ntapply(data$RQ,data$Condition,std.error)\n\n\n\n\n\n\n\n\n\n\nCheck your work\n\n\n\n\n\n\nWhat is the standard error of the RQ column?\n\n\n\n\n ✓0.0169\n\n\n ✗0.1238\n\n\n ✗0.0447\n\n\n\n\n\n\n\n\n\n\nConfidence Intervals\nConfidence intervals are closely related to standard error. The 95% confidence interval is a range of data values that encloses the sample mean. There is a 95% probability that the “true” mean lies within the 95% confidence interval of the sample mean.\nThe easiest way to compute a 95% confidence interval is to use the t.test() function.\nThe command for the t-test is t.test(dataname$variablename), using the actual datafile and variable names instead of the placeholders shown here.\nLet’s compute the confidence interval of the variable RQ measured during exercise. To do this, we need a way to extract a subset of the RQ data – just the RQ values measured under Condition 1.\nIn R, we do this by ‘indexing’ the value of one variable (RQ) by the value of a second variable (Condition). In this case, we wish to extract the values of RQ for those observations (rows) where Condition is exactly equal to 1(==1, in r-speak). The syntax is: data$RQ[data$Condition==1].\nNow write the command to perform a t-test on the subset of RQ values measured under Condition 1, exercise.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nt.test(data$RQ[data$Condition==1])\n\n\n\n\nIn the output, you should see the name of the variable you created, followed by two lines of information that are not relevant if you are only interested in knowing the 95% confidence interval. The 95% confidence interval is on the following line, followed by a computation of the sample mean.\nSo for these data, the (rounded) sample mean is 0.876, and the 95% confidence interval ranges from a minimum value of 0.834 to a maximum of 0.917.\n\n\nCongratulations!\nYou’ve completed lesson three, in which you learned how to compute several measures of variability (variance, standard deviation, standard error, and confidence intervals). You also learned two ways to subset a data set: using tapply() and indexing. In lesson four you will learn how to make a box plot, which is a basic way of graphically displaying the central tendency and the variability of any data set."
  },
  {
    "objectID": "Bio110_lesson_two.html#introduction",
    "href": "Bio110_lesson_two.html#introduction",
    "title": "Lesson 2: Central Tendency",
    "section": "Introduction",
    "text": "Introduction\nWelcome. In this lesson, you will learn about central tendency."
  },
  {
    "objectID": "Bio110_lesson_two.html#analyzing-central-tendency",
    "href": "Bio110_lesson_two.html#analyzing-central-tendency",
    "title": "Lesson 2: Central Tendency",
    "section": "Analyzing Central Tendency",
    "text": "Analyzing Central Tendency\nWhen analyzing a set of data values, it is often important to summarize where the numerical ‘center’ of the data values lies.”\nStart by creating a variable called “mydata” that contains the values 4, 4, 2, 6, 3, 0, and 3\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDid you remember to use the assignment arrow and the concatenate operator? Did you copy the values correctly?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmydata&lt;-c(4, 4, 2, 6, 3, 0, 3)\n\n\n\n\n\nCalculating Mean and Median\nThe mean (also known as the average) is a commonly-used measure of the center of a set of values. To compute the mean, you can use the command mean(dataname), substituting the name of your variable for the placeholder shown here.\nTry it now with your mydata variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nPut the name of your variable in the parentheses.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmean(mydata)\n\n\n\n\nFor some data sets, the mean is not a very good measure of the data’s central tendency. For example, what if your data values were 2, 2, 2, 3, 1, 3, 12?\nTo analyze this data, create a new variable, data_two, containing these values.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDon’t forget to use the assignment arrow and the concatenate function.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata_two&lt;-c(2, 2, 2, 3, 1, 3, 12)\n\n\n\n\nNext, compute the mean of data_two.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nPut the mean of your variable in parentheses.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmean(data_two)\n\n\n\n\nNotice that all but one of the data values are lower than the mean, because there is one really high value. For data like these, the median is a better measure of central tendency. The median is the middle value when the data are ordered from lowest to highest.\nThe function median() computes the median for a variable.\nCompute the median of data_two.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmedian(data_two)\n\n\n\n\nNotice that the median is not unduly influenced by the single large data value, and so is a more accurate measure of the center of the data values.\nNext, write an expression for the difference between the mean and the median of data_two. R uses the symbols + for addition, - for subtraction, * for multiplication, and / for division. Subtract the smaller value from the larger value.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nSeparate these two quantities with a minus sign.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmean(data_two)-median(data_two)\n\n\n\n\nYou may be wondering how to know whether to use the mean or the median. This can be especially challenging if you have a variable with many data values.\n\n\nHistograms\nYou can examine the distribution of the data values visually using a histogram. A histogram shows how many data values fall into different size categories.\nThe function hist() creates a histogram for a variable.\nCreate a histogram for the original data variable, called mydata.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nhist(mydata)\n\n\n\n\nYou should see a histogram pop up under the code block. On the x-axis are intervals (bins) representing the different possible data values. On the y-axis are the frequencies with which different data values are present in the data set (once, twice, etc.).\nNow create a second histogram for data_two.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see from the histogram that the mean of data_two does not describe these data very well. When a histogram’s peak is not near the center, and/or its two tails are quite asymetrical, it’s best to use the median, not the mean, to summarize the central tendency.\nThat’s the end of this lesson on central tendency. Another important kind of descriptive statistic is variability; that’s the topic of lesson three."
  },
  {
    "objectID": "Bio110_lesson_four.html#introduction",
    "href": "Bio110_lesson_four.html#introduction",
    "title": "Lesson 4: Box Plots",
    "section": "Introduction",
    "text": "Introduction\nWelcome to lesson four, where you will learn the basics of graphing using boxplots. Boxplots are an excellent graphing option for many datasets, because they are valid regardless of whether or not the data are normally distributed. But they take a little getting used to, because they are not as commonly seen as bar graphs are.\nWe will work with the physiology dataset, called data, that you have already seen.\nType the word data to recall what it contains.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Bio110_lesson_four.html#plotting-data",
    "href": "Bio110_lesson_four.html#plotting-data",
    "title": "Lesson 4: Box Plots",
    "section": "Plotting Data",
    "text": "Plotting Data\nR has a function called plot, which makes a simple graph showing the relationship between an independent and a dependent variable.\n\nWhen the independent variable is continuous, the plot command creates a scatterplot.\nWhen the independent variable is categorical, the plot command creates a boxplot.\n\nWhen data are in the form of numbers, R can treat them either as continuous (numeric variables, in R language) or as categorical (factor variables, in R language).\nIn data the different measurements are categorized as having been made under either exercise (1) or resting (2) conditions.\nSuppose you wanted to create a graph that compared the respiratory quotients (RQ) under these two conditions.\nThe basic plot function has this form: plot(yourdata$xvariable, yourdata$yvariable). You would need to substitute the actual names for the dataset and variables used as place-holders here.\nUse the plot function to graph the RQs of the two groups, exercise and resting.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that variable names are case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ)\n\n\n\n\nNotice that R has created a scatterplot, and that it is treating the Condition variable as continuous. Many of the dots representing the data values overlap with each other. For this reason, it is hard to see whether the central tendencies of the two conditions differ. A boxplot is a better choice for these data.\n\nBoxplot\nIf the Condition variable were a factor variable, R would make a boxplot instead. We can tell R to treat this variable as a factor by writing: data$Condition&lt;-as.factor(data$Condition).\nTry it for yourself. Make Condition a factor variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDid you spell everything correctly?\n\n\n\nNow run the plot command again.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition,data$RQ)\n\n\n\n\nWhen R understands that the Condition variable is a factor or category, the ‘plot’ command creates a boxplot. The horizontal bars represent the medians of each group. The boxes represent the interquartile range, i.e. the middle 50% of all the data values.\n\nIn which condition is the median respiratory quotient higher, exercise or resting?\n\n\n\n\n ✗resting\n\n\n ✓exercise\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that 1 represents the exercise condition and 2 represents the resting condition.\n\n\n\n\n\nModifying a plot\nThis boxplot is not very easy to read because the labels are not very clear. We can change the plotting parameters to improve its appearance. There are many ways to modify the plot command to add additional features. We’ll cover some of the most basic modifications in this tutorial.\n\nAxis labels\nThe axis labels should be self-explanatory. We can create axis labels by adding the xlab='_____' and ylab='____' arguments to the plot command. Because these labels are character strings (i.e. lists of letters), we need to enclose them in quotation marks.\nYou can add these terms to the plot command, within the parentheses. For example, you might write: plot(data$x, data$y, xlab='my x-axis label', ylab='my y-axis label').\nTry it yourself, with “Condition” as the x-axis label, and “RQ” as the y-axis label. Don’t forget to put the text of these labels in quotation marks, and to use a comma to separate them.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that text is case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, xlab=\"Condition\", ylab=\"RQ\")\n\n\n\n\nBut the labels are still not completely clear. It would be much clearer to replace the 1 and 2 with the labels ‘exercise’ and ‘resting.’ You can do this by adding the names=c('category name1', 'category name2', etc.) argument to the plot command.\nTry it now, using “exercise” for the first category name, and “resting” for the second one. Put the names command in front of the arguments for the axis labels, and separate them with a comma.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nIn this tutorial, R is looking for you to enter the arguments in a particular order. Try putting the names argument in front of the axis label argument – this might be why you got an error message despite seeing the correct graph.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, names=c(\"exercise\",\"resting\"), xlab=\"Condition\",ylab=\"RQ\")\n\n\n\n\n\n\nAdjusting the range of values\nYou might also want to use a wider range of values on the y-axis so that the figure has a little more elbow room. For example, the current y-axis starts at an RQ value of 0.85 and ends at a value of 1.0. Maybe you’d like it to range from 0.75 to 1.05 instead.\nYou can do this by inserting the ylim=c(lowerlimit, upperlimit) argument into the plot command like this: plot(data$x, data$y, ylim=c(0.75, 1.05)).\nTry it now, inserting the ylim specification after the commands for category names, axis labels, etc.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember to put all text expressions in quotes. And R wants you to use the same case, upper or lower, as the instructions specify.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nplot(data$Condition, data$RQ, names=c(\"exercise\",\"resting\"), xlab=\"Condition\", ylab=\"RQ\", ylim=c(0.75,1.05))"
  },
  {
    "objectID": "Bio110_lesson_four.html#congratulations",
    "href": "Bio110_lesson_four.html#congratulations",
    "title": "Lesson 4: Box Plots",
    "section": "Congratulations!",
    "text": "Congratulations!\nHooray! You have completed lesson four. You have learned how to make and interpret a boxplot and how to modify the axis labels and the x- and y-limits. Lesson five will teach you how to make a scatterplot."
  },
  {
    "objectID": "Bio110_lesson_six.html",
    "href": "Bio110_lesson_six.html",
    "title": "Lesson 6: Bar Graphs",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bio 110 Tutorials",
    "section": "",
    "text": "Welcome to the BIO 110 tutorial site! Here you can find tutorials for lessons in working with data."
  },
  {
    "objectID": "Bio110_lesson_one.html#introduction",
    "href": "Bio110_lesson_one.html#introduction",
    "title": "Lesson 1: Basic Operations",
    "section": "Introduction",
    "text": "Introduction\nWelcome to this introduction to R. You will learn how to enter data and to perform some basic operations.\nR is a program for dealing with data. In Biology courses, most of the time your data will be in the form of a table with columns and rows.\nLater on, you will learn how to import your own data table into R in order to work with it. For now, we will work with a very simple set of data: data for a single variable."
  },
  {
    "objectID": "Bio110_lesson_one.html#working-with-data",
    "href": "Bio110_lesson_one.html#working-with-data",
    "title": "Lesson 1: Basic Operations",
    "section": "Working with data",
    "text": "Working with data\nFor example, suppose you have measured the diameters of a sample of 8 bacterial colonies. The data values (in mm) are: 4, 3.5, 6.1, 2.2, 4.7, 3, 5.2, and 4.6.\n\nAssigning values to a variable name\nIn R, you ‘assign’ these values to a variable name using an ‘arrow’ formed by the ‘less than’ symbol and the dash, like this: &lt;-.\nOn the left side of the arrow, put the name of the variable you wish to create. The name should be short, descriptive, and must not contain any spaces. On the right of the arrow, type your data values, separated by commas. The data values should be enclosed in parentheses, and preceded by the letter c, which stands for ‘concatenate’ or ‘combine’ all the values into a single vector of values.\nThis command creates a variable called ‘diam’ that contains our example data values: diam&lt;-c(4,3.5,6.1,2.2,4.7,3,5.2,4.6)\nNow you should try creating the diam variable using these same data. In the code chunk below, type in a command to create diam.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nDon’t forget the parentheses.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndiam&lt;- c(4,3.5,6.1,2.2,4.7,3,5.2,4.6)\n\n\n\n\nIf you are interested in knowing what a variable contains, you can just type its name. R is case-sensitive, so be careful about whether you type in upper or lower case.\nTry typing diam and see what you get.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nJust type the word diam.\n\n\n\n\n\nUsing data tables\nIn an R data table, each column represents a different variable. Each observational unit is represented by a separate row in the table. The first row of the table is used for the names of the different variables. In R, variable names must not contain any spaces.\nA table with this format has been created for you and imported into this tutorial. It has been given the creative name of data.\nType a command that will show you a display of the data table called “data”.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nTo see an object in R, type its name. No quotes are required.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata\n\n\n\n\nYou can see that this data table contains 4 variables and 15 rows. (Also, each row is numbered sequentially; these numbers are not considered a variable.)\nThese data are from a physiological study. Each individual’s respiratory quotient (RQ) was measured, either after exercise (1), or during rest (2). Their heart rates in beats per minute were also measured. NA stands for ‘not available,’ meaning that the data for these combinations of individual and variable were lost or not recorded.\n\nSpecifying Variables\nYou might wish to see just one of the variables in this data file. The way to specify an individual variable is to use the name of the data file, followed by the dollar sign, $, followed by the name of the variable – with no spaces.\nWhat would you type to see a list of the heart_rate data values in this file?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata$heart_rate\n\n\n\n\n\n\n\nData Structure\nIn R, each variable is encoded as either numeric (a number), integer (a whole number), a factor (a category, expressed either as a word or a number), or character (a string of letters). There are other less common variable properties as well. A variable’s property is important because some operations can only be carried out on variables with certain properties.\nA data file’s ‘structure’ refers to the properties of its variables. To find out the properties of all the variables in a data set, you would use the command str(dataname), using the name of your data file in place of the placeholder here.\nWrite a command that will allow you to see the structure of ‘data.’\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nstr(data)\n\n\n\n\n\nChanging a variable’s property\nYou can see that the variable data$Condition is currently encoded as an integer. But it is actually a category variable. You can change this variable’s property with the assignment arrow, in the following way: data$Condition &lt;-as.factor(data$Condition).\nTry changing the variable named Individual to a factor variable. You will notice that a little prompt box shows up. You can save yourself some typing by choosing the rest of the expression from among the choices in the prompt box.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember to use the dollar sign notation, and that R is case-sensitive.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata$Individual&lt;-as.factor(data$Individual)\n\n\n\n\nCongratulations! You have finished the first R tutorial. You have learned how to create a variable in R, how data files in R are organized, and how to examine and change the properties of different variables."
  }
]