---
format: html
editor: visual
filters: 
  - webr
  - naquiz
title: "Lesson 2: Central Tendency"
---

```{webr-r}
#| context: setup

url<- "https://lewis-and-clark-data-science.github.io/BIO-110-Web-Tutorials/physiology_data.csv"
download.file(url, "physiology_data.csv")
#Pulls data that has been loaded into the Bio 110 github repo. 
# Note: must include physiology_data.csv under resources in the quarto.yml file. Then render and commit to github. then can use the main website url and add "physiology_data.csv" at the end after the slash 
library(tidyverse)
data<- read.csv("physiology_data.csv")

```

## Introduction

Welcome. In this lesson, you will learn about central tendency.

## Analyzing Central Tendency

When analyzing a set of data values, it is often important to summarize where the numerical 'center' of the data values lies.

Start by creating a variable called `mydata` that contains the values 4, 4, 2, 6, 3, 0, and 3

::: panel-tabset

## Code editor

```{webr-r}
#Type your code here


```

## Hint

Did you remember to use the assignment arrow (`<-`) and the concatenate operator (`c`)?

## Answer

```{r}
#| eval: false
mydata <- c(4, 4, 2, 6, 3, 0, 3)
```
:::

### Calculating Mean and Median

#### Mean

The **mean** (also known as the average) is a commonly-used measure of the center of a set of values. To compute the mean, you can use the command `mean(dataName)`, substituting the name of your variable for the placeholder shown here.

Find the mean of your `mydata` variable.

::: panel-tabset
## Code editor

```{webr-r}
#Type your code here


```

## Hint

Put the name of your variable in the parentheses. You don't need to use quotes. 

## Answer

```{r}
#| eval: false
mean(mydata)
```
:::

For some data sets, the mean is not a very good measure of the data's central tendency. For example, what if your data values were 2, 2, 2, 3, 1, 3, 12?

To analyze this data, create a new variable, `data_two`, containing these values.

::: panel-tabset

## Code editor

```{webr-r}
#Type your code here


```


## Hint

Don't forget to use the assignment arrow and the concatenate function.

## Answer

```{r}
#| eval: false
data_two<-c(2, 2, 2, 3, 1, 3, 12)
```
:::

Next, compute the mean of `data_two`.

::: panel-tabset

## Code editor 

```{webr-r}
#Type your code here


```

## Answer

```{r}
#| eval: false
mean(data_two)
```
:::

Notice that all but one of the data values are lower than the mean, because there is one really high value. For data like these, the median is a better measure of central tendency. 

#### Median 

The **median** is the middle value when the data are ordered from lowest to highest.

The function `median(dataName)` computes the median for a variable.

Compute the median of data_two.

::: panel-tabset

## Code editor

```{webr-r}
#Type your code here


```

## Answer

```{r}
#| eval: false
median(data_two)
```
:::

Notice that the median is not unduly influenced by the single large data value, and so is a more accurate measure of the center of these data values.

#### Basic Arithmetic with mean/median

Next, write an expression for the difference between the mean and the median of `data_two`. R uses the symbols `+` for addition, `-` for subtraction, `*` for multiplication, and `/` for division. Subtract the smaller value from the larger value.

::: panel-tabset

## Code editor

```{webr-r}
#Type your code here


```

## Answer

```{r}
#| eval: false
mean(data_two)-median(data_two)
```
:::

## Summarizing central tendency

In this section, we'll learn how you can easily display the mean and median of multiple different groups in a data set.

The functions `group_by()` and `summarize()` help us do this. 

### Summary 

First, we'll learn how to quickly find the mean and median for columns in a dataframe. 

The function `summary()` will display the mean, median, minimum, maximum, and quartiles for each variable (or column) in a dataframe. 

The syntax is `summary(yourDataName)`. 

The dataframe `data` was used in the previous lesson. We'll use it again here, so take a look at [lesson 1](Bio110_lesson_one.qmd) to learn more about what it contains. 

Try using `summary()` with `data`. 

::: panel-tabset

## Code editor

```{webr-r}
#Your code here


```

## Answer

```{r}
#| eval: false
summary(data)
```

:::

You should see that for each variable (RQ, condition, heart_rate, Individual), the minimum, 1st quartile, median, mean, 3rd quartile and maximum values are given. 


::: question
**What is the median heart rate value?**

::: choices
::: choice
68.50
:::
::: choice
7.50
:::
::: {.choice .correct-choice}
70.50
:::
:::
:::

### The Pipe

A very useful function in the tidyverse (our current set of R packages) is called **the pipe**. It's a way to string together functions and data. You can read it as "AND THEN". 

The pipe can be written as `%>%` or `|>`

Both do the same thing! 

Let's look at an example. Click "run code" below. 

```{webr-r}
#| read-only: TRUE
data |> 
  summarize()
```





NOTE: Plan to just have people use ggplot NOT the other way to plot... 












### Histograms

You may be wondering how to know whether to use the mean or the median. This can be especially challenging if you have a variable with many data values. One option is to use a histogram to see how your data is distributed. In the next tutorial, we'll cover histograms. 

You can examine the distribution of the data values visually using a histogram. A histogram shows how many data values fall into different size categories.

The function `hist()` creates a histogram for a variable.

Create a histogram for the original data variable, called `mydata`.

```{webr-r}
#Type your code here


```

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
hist(mydata)
```
:::

You should see a histogram pop up under the code block. On the x-axis are intervals (bins) representing the different possible data values. On the y-axis are the frequencies with which different data values are present in the data set (once, twice, etc.).

Now create a second histogram for data_two.

```{webr-r}
#Type your code here


```

You can see from the histogram that the mean of `data_two` does not describe these data very well. When a histogram's peak is not near the center, and/or its two tails are quite asymetrical, it's best to use the *median*, not the *mean*, to summarize the central tendency.

That's the end of this lesson on central tendency. Another important kind of descriptive statistic is variability; that's the topic of lesson three.
