---
format: html
editor: visual
filters: 
  - webr
title: "Lesson 2: Central Tendency"
---

```{webr-r}
#| context: setup

url<- "https://lewis-and-clark-data-science.github.io/BIO-110-Web-Tutorials/physiology_data.csv"
download.file(url, "physiology_data.csv")
#Pulls data that has been loaded into the Bio 110 github repo. 
#Note, the title of this data is also included in the _quarto.yml doc under resources so that it's included in the website. unclear if this is also necessary in the header of THIS document

data<- read.csv("physiology_data.csv")

```

## Introduction

Welcome. In this lesson, you will learn about central tendency.

### Analyzing Central Tendency

When analyzing a set of data values, it is often important to summarize where the numerical 'center' of the data values lies."

Start by creating a variable called "mydata" that contains the values 4, 4, 2, 6, 3, 0, and 3

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Did you remember to use the assignment arrow and the concatenate operator? Did you copy the values correctly?
:::

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
mydata<-c(4, 4, 2, 6, 3, 0, 3)
```
:::

#### Calculating Mean and Median

The mean (also known as the average) is a commonly-used measure of the center of a set of values. To compute the mean, you can use the command `mean(dataname)`, substituting the name of your variable for the placeholder shown here.

Try it now with your `mydata` variable.

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Put the name of your variable in the parentheses.
:::

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
mean(mydata)
```
:::

For some data sets, the mean is not a very good measure of the data's central tendency. For example, what if your data values were 2, 2, 2, 3, 1, 3, 12?

To analyze this data, create a new variable, `data_two`, containing these values.

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Don't forget to use the assignment arrow and the concatenate function.
:::

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
data_two<-c(2, 2, 2, 3, 1, 3, 12)
```
:::

Next, compute the mean of `data_two`.

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Put the mean of your variable in parentheses.
:::

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
mean(data_two)
```
:::

Notice that all but one of the data values are lower than the mean, because there is one really high value. For data like these, the median is a better measure of central tendency. The median is the middle value when the data are ordered from lowest to highest.

The function `median()` computes the median for a variable.

Compute the median of data_two.

```{webr-r}
#Type your code here


```

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
median(data_two)
```
:::

Notice that the median is not unduly influenced by the single large data value, and so is a more accurate measure of the center of the data values.

Next, write an expression for the difference between the mean and the median of `data_two`. R uses the symbols `+` for addition, `-` for subtraction, `*` for multiplication, and `/` for division. Subtract the smaller value from the larger value.

```{webr-r}
#Type your code here


```

::: {.callout-tip collapse="true" icon="false"}
## Hint

Separate these two quantities with a minus sign.
:::

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
mean(data_two)-median(data_two)
```
:::

You may be wondering how to know whether to use the mean or the median. This can be especially challenging if you have a variable with many data values.

#### Histograms

You can examine the distribution of the data values visually using a histogram. A histogram shows how many data values fall into different size categories.

The function `hist()` creates a histogram for a variable.

Create a histogram for the original data variable, called `mydata`.

```{webr-r}
#Type your code here


```

::: {.callout-note collapse="true" icon="false"}
## Answer

```{r}
#| eval: false
hist(mydata)
```
:::

You should see a histogram pop up under the code block. On the x-axis are intervals (bins) representing the different possible data values. On the y-axis are the frequencies with which different data values are present in the data set (once, twice, etc.).

Now create a second histogram for data_two.

```{webr-r}
#Type your code here


```

You can see from the histogram that the mean of `data_two` does not describe these data very well. When a histogram's peak is not near the center, and/or its two tails are quite asymetrical, it's best to use the *median*, not the *mean*, to summarize the central tendency.

That's the end of this lesson on central tendency. Another important kind of descriptive statistic is variability; that's the topic of lesson three.
